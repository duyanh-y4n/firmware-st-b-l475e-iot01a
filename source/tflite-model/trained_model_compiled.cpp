/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 15.10.2020 10:41:17

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 144;
uint8_t* tensor_arena = NULL;
static uint8_t* current_location;
static uint8_t* tensor_boundary;
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const TfArray<1, float> quant0_scale = { 1, { 0.10661303251981735, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[20] = { -145, -67, 1298, -130, 1212, -52, -83, -37, -67, -186, -32, -92, 1128, 878, -20, 1008, -165, -69, -34, 365, };
const TfArray<1, int> tensor_dimension1 = { 1, { 20 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00063523591961711645, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(8) int32_t tensor_data2[10] = { 938, -14, -67, -187, -164, -59, -286, 28, -10, -22, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.00075421074870973825, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[4] = { 446, -308, -90, -45, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0015493420651182532, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int8_t tensor_data4[20*33] = { 
  -40, -42, -30, 1, 3, 17, -48, -29, -43, 11, 68, -11, -52, 67, 18, 43, 29, -35, 44, -5, 72, -41, 52, -40, -32, -41, -45, 29, -18, -12, -33, -48, 19, 
  0, 6, -7, -28, 3, 45, 27, 38, -51, 32, 23, -33, -19, -54, -38, -29, -27, -52, 33, 19, -9, -36, -51, -38, 11, -39, 7, 19, -36, -4, 41, 46, -59, 
  14, 10, -31, 28, 32, 19, -36, 25, -30, 10, -17, -2, 24, 5, 55, 5, -4, 22, 30, -87, 82, 44, -44, 73, -41, 53, 15, -10, 4, -76, -83, 63, -59, 
  -64, -29, -53, 11, 5, 7, -48, 4, 2, 40, -7, -57, -5, 17, -7, -36, -21, -17, 50, 27, -61, -42, 44, -18, -20, 36, -7, -26, 35, 0, -12, 28, -6, 
  -2, 72, -41, 62, 31, 48, -26, -37, -12, -7, -3, 3, 47, -12, -10, 48, 14, 18, -13, -16, -27, -5, -8, 52, 5, 4, 59, 19, 56, 2, -7, -12, -35, 
  55, 3, 17, 9, 25, 37, 27, 44, 23, -16, 0, -9, 73, 2, 60, 30, -17, 30, 49, 69, 23, -25, -18, 15, -47, 29, 23, 1, 43, 6, 15, 53, 14, 
  -46, 43, -11, -22, -25, 15, 14, -16, -30, 27, -50, -46, -62, -43, 40, 9, -19, 22, 12, -23, 7, -11, 48, -48, 11, -5, -32, 5, 10, -19, 22, -19, -38, 
  -19, 50, -38, -14, -46, 51, 7, -52, 45, -44, 35, -31, -42, -25, -33, -6, -1, -44, 3, -18, -17, -44, -54, -13, -9, -48, 39, 17, 21, 38, -49, 47, -49, 
  18, 18, 23, -55, 33, 23, -22, -8, 24, -43, -56, 44, -1, -27, -65, -40, -1, -19, 43, -20, -7, -22, -14, -32, -26, 39, -51, 13, 44, 6, -22, 19, -27, 
  9, -3, 17, 55, -40, 19, 7, -13, 35, 4, 15, -12, -46, -1, 11, -38, 8, 38, 65, -21, 35, -53, 23, 32, 70, -21, -4, -17, 69, 78, -3, 28, 17, 
  -18, -47, -26, 12, 62, 9, 38, 1, 13, 5, 7, 49, 9, 43, 25, -38, -16, 44, 20, -14, -76, -36, 75, -59, 13, 61, -12, 45, 44, 3, 89, 8, -27, 
  38, 20, -11, -18, -4, 46, 6, 31, 35, 42, -21, 35, -3, -48, -43, 15, -2, 23, 39, 28, 17, -32, -11, 4, 30, -47, -22, 34, -44, 28, -48, 12, -47, 
  8, 35, -5, -30, 37, -16, 22, -37, -22, 33, -20, -24, -29, 46, 57, -39, 40, 13, -37, -19, -94, -11, 68, -14, -28, 11, -36, 10, 44, -8, 44, -14, -25, 
  -4, 18, -26, 29, -1, -25, 18, -17, 8, 29, 43, 34, 32, -38, -4, 9, -37, -29, 7, 22, -73, -31, 19, -25, -57, 46, 23, 3, 42, -28, -64, 49, 5, 
  -21, -55, 68, -6, 34, 2, 37, 40, 17, -1, -31, 7, -49, -1, 9, -16, -21, -22, 30, 5, 37, 16, -15, 18, 48, 15, -27, 7, -5, 29, 25, 13, 55, 
  -39, 97, -23, 16, -11, 40, -29, -47, -27, 42, -51, 20, 24, -19, 73, -8, 18, 64, 12, 19, 4, -12, 1, -12, -39, -9, 32, 23, 3, -41, -84, -34, -55, 
  -48, 32, 28, 3, -8, -5, -12, -32, -10, 17, -2, -53, -46, -57, -46, 19, 24, 18, -52, -12, -31, -56, -33, 29, 27, 11, -19, -3, 48, 45, -3, -16, -11, 
  -32, -5, -60, -56, 41, -31, 2, 37, -39, -1, -3, 17, 4, -24, -16, -22, -2, -13, -36, 37, -59, -20, 24, -52, 42, -14, -47, 47, 26, 21, 26, 2, 3, 
  22, 65, 99, 127, 101, 60, 40, -23, -5, -8, -8, 40, 99, 68, 60, 117, 21, 41, -18, -7, 22, -1, 15, 124, -10, 17, 79, 22, 45, 28, 61, 56, 77, 
  12, 45, 68, 20, 37, 1, 6, -20, 80, 75, 16, 56, 18, 1, 48, 35, 21, -46, 11, 6, 29, 65, 36, -19, 26, 40, -6, 53, -54, -71, -67, -46, 51, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,33 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0059583326801657677, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[10*20] = { 
  -25, -3, 100, 8, 109, -24, -31, 13, -47, -93, -45, -46, 90, 93, -62, 59, -54, -2, 9, 9, 
  -40, 8, -31, 23, 13, 0, 42, -27, -22, -48, 8, -49, -16, -19, -50, -53, -27, 39, 25, -54, 
  -53, 44, 12, -35, 34, 3, 21, -27, 50, 37, -44, -30, 12, -59, 18, -21, -18, 55, -62, -24, 
  -79, -16, -28, -58, 19, 21, 53, 53, 41, -21, 58, 16, 39, -43, -25, 51, -3, 26, 48, -42, 
  16, 38, -7, -43, -14, 72, 12, -2, -51, 84, 49, -70, -9, 29, -4, 24, 0, -21, 127, 34, 
  34, 46, -51, 10, -40, -26, 6, -14, 52, -70, -67, 51, -51, 23, -43, 43, -50, 1, -67, 33, 
  36, -22, 24, 40, 70, -15, -25, 28, 20, 35, -36, 29, -52, -8, -20, 8, 11, -30, 84, -30, 
  -44, 50, -45, -49, 28, -23, 2, -51, 40, 35, 81, 45, 9, -5, -26, -26, -28, 29, -11, 19, 
  -56, 33, 36, 29, 107, -17, 43, -59, -19, -50, 39, 36, 64, 57, -22, 24, -48, 62, 18, -6, 
  0, 28, 66, 41, -47, 67, 35, -30, 81, -10, -32, 39, -63, -19, -25, 33, 56, 50, 25, 70, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0069558806717395782, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[4*10] = { 
  70, -6, -3, -17, -59, -20, -85, -4, 44, -8, 
  -6, -6, 45, 30, -2, 14, 41, -36, 22, 39, 
  -127, -53, -36, 51, 46, 25, -2, 13, 26, -42, 
  -115, 49, 35, 0, 25, -1, 2, -47, -58, 74, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 4,10 } };
const TfArray<1, float> quant6_scale = { 1, { 0.01082732155919075, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.10842778533697128, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.14309559762477875, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,4 } };
const TfArray<1, float> quant9_scale = { 1, { 0.23995319008827209, } };
const TfArray<1, int> quant9_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,4 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,1 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 33, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 660, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %u\n", bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  current_location = tensor_arena + kTensorArenaSize;
  tensor_boundary = tensor_arena;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
      uint8_t* end = start + tensorData[i].bytes;

     tflTensors[i].data.data =  start;

     if (end > tensor_boundary) {
       tensor_boundary = end;
     }
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
  free_fnc(tensor_arena);
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
