/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 17.04.2021 12:34:36

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 2288;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[42];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[21];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,598 } };
const TfArray<1, float> quant0_scale = { 1, { 0.046332318335771561, } };
const TfArray<1, int> quant0_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 192, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int8_t tensor_data2[16] = { 33, -55, -110, -97, -49, -63, -56, -114, -118, -76, -100, -98, -127, -68, 41, -77, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const TfArray<1, float> quant2_scale = { 1, { 0.010849730111658573, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int8_t tensor_data3[32] = { 13, 100, 37, -18, 63, 127, 21, 73, -36, -10, 92, -20, 120, 48, 80, 72, -17, 35, 54, 100, -39, -40, 2, 13, -66, 48, 37, 88, -33, 30, 14, 21, };
const TfArray<1, int> tensor_dimension3 = { 1, { 32 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0089351674541831017, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int8_t tensor_data4[32] = { 27, 68, -3, -32, 2, -6, -27, -17, -40, 57, -6, 36, -25, -24, -19, 8, 36, -13, 6, -24, -9, 66, -8, 127, 59, 92, 54, -47, 80, -49, -55, -29, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0074593028984963894, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[18] = { 5722, -1166, -2080, 629, 124, 900, 330, -1732, -410, 896, 831, -902, -2906, 432, -199, 148, -514, -1137, };
const TfArray<1, int> tensor_dimension5 = { 1, { 18 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00048006401630118489, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[18*192] = { 
  -22, 15, 0, -4, -8, -14, -22, -54, -62, 16, 3, -13, -40, -73, -19, 9, 36, -32, -22, -51, -88, 17, 5, 19, -7, -5, 12, 29, 4, -23, -21, -18, -17, 3, 13, -22, -30, -6, -11, -50, -77, 29, -8, -29, -70, -51, -36, 12, -5, -63, -25, -55, -67, 18, 2, 40, 5, 4, 8, -36, -32, -48, -35, -6, -1, -5, 6, -24, -60, 3, -22, -105, -45, 17, -14, -42, -77, -118, -60, 6, -22, -120, -10, -127, -80, 19, 8, 41, 18, 5, -24, -40, -40, -58, -11, -16, -16, 22, 18, -11, -55, 7, -57, -92, -58, 28, 11, -33, -77, -92, -49, 11, -19, -103, -4, -117, -49, 18, -1, 28, 8, 7, -25, -60, -49, -63, 1, -14, -15, 21, 3, -17, -17, 14, -25, -105, -44, 22, -14, -18, -86, -84, -56, -1, -10, -91, -18, -126, -47, 18, -14, 42, 11, 5, -19, -1, -55, -40, -19, -13, -7, 5, 25, -10, -54, 7, -10, -120, -58, 5, 13, -11, -39, -35, -90, 23, -4, -114, -11, -115, -44, 12, -16, 17, 16, -4, -10, 3, -70, -55, 12, -14, 
  -13, -17, 23, -2, -25, -8, 26, 4, -9, -2, -4, 19, 1, 13, -5, 9, 4, 12, 9, 15, -17, 6, 0, -5, 2, 14, -1, 14, 1, 10, 17, 13, -21, -3, 14, 17, 12, -12, 32, -10, -11, -10, 4, 12, 8, 12, 6, 12, 6, 18, 1, 9, -10, 8, 3, 8, -12, 4, -7, 15, 3, 8, 9, 17, 9, -17, 23, 20, 4, -11, 28, -16, -6, -12, 9, 15, 2, 7, 9, 11, -1, 14, 2, 5, -7, 10, 1, 1, 6, 20, -6, 18, -2, 13, 18, 15, 9, -28, 17, 15, 6, -13, 26, -7, -14, -18, 0, 8, 5, 5, -4, 19, 0, 14, 6, 6, -13, 13, 0, 18, 2, 9, 2, 9, 5, 11, 4, 15, 5, -14, 14, 14, 4, -7, 6, -7, -23, -20, -1, 7, 7, 0, 0, 11, 1, 11, -11, 8, -9, 4, 7, 7, 16, 9, 10, 5, 4, 10, 5, 3, 10, -7, 12, 7, 12, -8, 12, -12, -6, -8, 2, 19, 8, 12, 6, 13, -5, 4, 11, 6, 6, 4, 7, -3, 8, 11, 3, 13, 1, 1, 1, -9, 
  -28, -49, 19, -11, -20, 2, 17, 17, -9, -8, -5, 36, 18, -19, 2, -9, -22, -60, 3, 25, -3, 16, -8, 23, 10, 14, -8, -65, -14, 2, 33, 30, 22, -30, 6, -17, -17, 56, 8, 14, -18, -10, -29, 18, 20, 5, -18, 1, -50, -3, -20, 8, -15, 31, -20, 40, -18, 32, -61, -33, 39, 2, 15, 27, 5, -30, 12, -21, -2, 55, -29, 21, -12, 2, -44, 27, 17, -1, -14, 2, -37, 2, -20, 13, -7, 32, -30, 44, -27, 34, -56, -26, 28, -10, 22, 31, 6, -26, -8, -14, 2, 49, -38, 24, -16, 6, -28, 10, 13, 13, 2, 13, -42, -12, -12, 9, -4, 27, -32, 28, -34, 19, -28, -41, 23, -7, 23, 12, -4, -27, 1, -8, -3, 34, -21, 21, -20, 17, -32, 13, 10, 13, 2, 16, -25, -8, -12, 19, -1, 29, -39, 26, -4, 16, -22, -35, 26, 1, 14, -3, -3, -22, -21, -2, 13, 20, -5, 14, -10, 16, -5, 1, 20, 22, 11, 10, -11, 1, -6, 21, 16, -1, -7, -4, 2, 14, -5, -6, 21, 7, 7, 12, 
  3, -10, -12, 17, 11, -8, -31, -4, 35, -8, 1, -5, -29, -23, -38, -16, -6, 4, 14, -79, -14, 2, 4, 4, -10, 11, -8, 0, -32, -36, -17, 26, -31, 11, -1, -42, 33, -6, -21, 4, 12, 2, -6, -14, -10, -30, -13, -10, 29, 18, 13, -7, -14, -38, -1, -8, 11, 10, 0, 3, 22, -51, -20, 17, -36, -5, -21, -8, 26, -12, -21, 8, 8, -16, -16, -16, -20, -27, -8, -36, 39, 18, 10, -2, -16, -22, -17, -18, -17, 10, 35, -6, 25, -51, -30, 22, -24, -6, -25, 4, 25, -10, -21, 12, 8, -24, -34, -4, -24, -27, -25, -25, 33, 12, 14, -3, -12, -5, -22, -8, -17, -9, 32, 0, 26, -53, -23, 23, -25, -11, 6, 16, 18, -14, -13, 13, 32, -23, -32, -6, -14, -37, -17, -30, 31, 17, 8, -2, -5, 3, -13, 1, -29, -7, 15, 6, 18, -30, -22, 16, -8, 2, -6, 13, -1, -1, 4, 12, 9, -10, -12, 3, 1, -2, -3, -26, 29, 16, 9, 0, 6, -7, 8, -6, -20, -11, 17, 18, 0, -17, -10, 14, 
  -2, 20, -1, 9, -19, 9, 18, 14, 20, -10, -4, -37, -19, -29, -4, -28, -22, -13, 6, -57, 28, -12, 15, -2, 1, -4, -21, -37, -7, -52, -48, 13, -24, 8, -27, -38, 26, -10, 8, 10, 0, -6, -49, -29, -31, -19, 2, -30, 18, 8, 12, 4, 11, -45, 11, -38, 14, -26, -39, -8, 32, -22, -15, 21, -31, -2, -44, -16, 30, -1, 13, 18, 1, -15, -34, -54, -72, -17, 5, 9, 18, 7, 11, 2, 12, -39, -3, -42, -31, -3, -12, -21, 36, -33, -25, 14, -17, 9, -31, -8, 25, 9, -8, 24, -2, -15, -26, -41, -47, -9, 5, 20, 18, -8, 12, 12, 13, -29, -13, -34, -36, 4, -8, -18, 36, -30, -19, 11, -4, 12, -3, 1, 10, 5, -3, 19, 10, 0, -13, -20, -18, -5, 5, 11, 17, -9, 3, 20, -1, -12, -15, -9, -13, 16, -14, -8, 27, -21, -23, 1, 1, 3, -18, -13, 13, -8, -27, 20, 2, 9, -13, 12, -16, 3, 9, 12, 10, 6, 11, 18, 28, -1, 13, -4, -5, 13, 3, -8, 21, -18, 12, 9, 
  -9, 28, -20, 0, 1, -7, 10, 11, 6, -11, -15, -3, -42, -3, -5, 2, 36, -3, 12, -42, 14, -33, -4, -9, 11, -4, 7, -18, 5, -28, -52, 2, -3, 14, -20, -23, -35, -1, 19, 9, -14, 1, 22, -38, -48, 4, 27, -13, 16, -5, 13, 12, 21, -32, -2, -18, -5, -15, -8, 17, 21, -5, -24, -1, 24, 7, -24, 1, -22, -19, 32, 16, -12, 3, -9, -36, -46, 14, 14, -19, 23, -8, 18, 12, 21, -50, 0, -32, -11, -3, -2, 0, 23, -15, -8, -1, 16, 20, -3, -9, -28, -17, 14, 22, -14, -4, -7, -42, -44, 1, 14, -20, 25, -17, 17, 18, 15, -33, 8, -24, -15, -7, 4, -6, 27, -4, -13, 4, 16, 3, -18, -1, -26, -20, 7, 15, -16, -11, -11, -26, -50, 2, 12, -33, 26, -13, 4, 21, 18, -24, -7, -6, -16, 4, -16, 0, 20, -16, -24, 4, 20, 17, -7, -14, -14, -10, -4, 14, 7, -32, -5, -18, -37, -14, 11, -16, 8, -9, 9, 24, 21, -10, 6, -17, -24, 16, -16, -13, 19, -20, 16, -13, 
  16, 34, 10, 13, 0, -6, -24, -5, 6, 0, -5, 17, 16, 4, -20, -12, -1, 22, -8, -15, 13, 6, 6, -9, -1, 2, 5, 17, 10, 11, 5, -42, -25, 26, 23, 10, 1, -21, -38, 16, -8, 1, -44, 8, 19, 2, -22, -20, -1, 18, -11, -40, 17, 2, 2, -25, 10, -8, 12, 24, 5, 6, 10, -35, -4, 28, 27, 29, -3, -28, -22, 18, 1, -13, -32, 16, 15, -2, -13, -37, -17, 20, -7, -38, 13, 1, 7, -35, -12, -34, 11, 16, -3, 5, 10, -27, -17, 34, 21, 20, 1, -33, -25, 18, 13, -14, -32, 18, 16, 2, -22, -31, -17, 18, -1, -32, 14, 11, 1, -18, -23, -31, 14, 17, 5, -1, 13, -22, -8, 26, 10, 14, -4, -30, -3, 13, -5, -13, -29, 13, 23, -7, -16, -13, -15, 13, -4, -26, 14, -9, 4, -36, 1, -24, 12, 14, 2, -8, 11, -30, -9, -14, -1, 11, 1, -2, -44, 18, 0, -17, -21, 7, 16, 16, 0, -17, -7, 15, 14, -30, 23, -8, 6, 1, -7, -32, 4, 8, 2, -20, -13, -10, 
  -15, -24, -37, -6, 9, 10, -23, 8, -3, 16, -17, 26, 8, 14, 26, -12, 0, -17, -7, 26, -1, -13, 7, -30, -7, 9, -16, -38, 11, 19, 33, -69, 25, 4, -26, -45, -26, -4, -13, -20, -14, 21, -6, 19, 16, 15, 30, -10, -15, -27, 3, 16, -7, 7, 6, 9, 18, -10, 7, -31, -35, 17, 23, -18, 28, 2, -35, -37, -37, -7, -28, -22, -5, 25, 0, 23, 6, 17, 26, -5, -18, -24, -10, 15, -6, 10, 20, 11, 41, 9, 10, -46, -45, 11, 35, -25, 25, -6, -30, -35, -43, -11, -31, -29, -14, 25, -6, 21, 9, 18, 21, -4, -25, -28, 9, 17, -1, 5, -3, 19, 34, 9, 4, -42, -49, 10, 26, -17, 16, 12, -27, -45, -56, -7, -39, -53, -21, 26, -3, 9, 3, 8, 17, -1, -37, -35, 13, 22, 13, 2, 14, 14, 33, 7, 7, -27, -50, 9, 18, -50, 9, -1, 0, -36, -44, 1, -23, -59, -21, 35, -5, 19, -8, 2, 17, 5, -9, -29, 12, 18, 1, 8, 16, 20, 14, 0, 7, -8, -25, 13, 12, -7, 
  8, -19, -37, 1, 9, -4, -30, -4, -31, 5, -2, 24, 8, 28, 1, 3, -11, 22, -19, -19, 5, 14, 6, -5, 1, -3, 2, 32, 1, 19, 30, -65, -20, -24, -21, 20, -9, -34, -29, 2, -37, -11, -14, 15, 11, 19, -22, -8, -18, 22, -13, -44, -2, 21, 3, -20, -16, -22, 13, 28, -20, 19, 21, -47, 0, -35, -19, 15, -5, -22, -37, 6, -36, -23, -17, 21, 0, 20, -16, -2, -33, 26, -9, -43, -3, 27, 3, -18, -11, -15, 8, 26, -2, 17, 23, -26, -3, -26, -12, 15, -3, -27, -47, 19, -38, -36, -22, 16, 12, 20, -22, -18, -25, 18, -12, -32, -5, 26, -5, -16, -12, -27, 15, 18, -14, 10, 22, -14, 2, -23, -22, 7, -5, -29, -42, 6, -62, -22, -20, 15, 8, 10, -15, -26, -23, 14, -17, -39, 2, 14, 11, -18, -5, -45, 7, 19, -3, 9, 15, -8, 5, -4, -9, 5, 5, -13, -48, 12, 5, 8, -6, 13, 11, 3, -5, -1, 0, 15, 10, -29, 1, 20, 8, 0, 6, -37, 2, 20, 11, 8, 9, -1, 
  -25, 16, -24, 17, -3, -1, 18, 8, -23, -1, 13, -20, -21, -35, -18, -2, -6, 20, 23, -26, -17, -6, -45, -17, -15, 29, -5, -11, -7, -79, -24, 30, 41, 28, -44, -10, -21, -3, -11, 8, -16, -15, 29, -26, 0, -18, -8, -36, -24, 19, 21, -32, 4, -22, -28, -38, 11, 20, 2, -14, -18, -50, -5, 17, 34, 24, -49, -18, -29, -11, 0, 10, -23, -4, 23, -9, 0, -18, 1, -21, -22, 22, 22, -29, -2, -27, -22, -33, 37, 12, 5, -14, -17, -78, -5, 25, 36, 23, -13, -31, -31, -20, -2, 9, -12, -3, 15, -6, 1, -39, -13, -33, -28, 13, 21, -34, 5, -29, -23, -35, 22, 14, -4, -13, -23, -50, -11, 29, 26, 13, -11, -34, -24, 10, 5, -6, -12, -2, 13, -13, -1, -35, -14, -12, -19, 10, 19, -30, 0, -17, -53, -15, 20, 13, -10, -2, -26, -6, -32, 19, 25, 12, -25, -35, -17, -11, -27, -15, -10, -3, 2, -12, -37, -11, -25, 3, 9, 12, 28, -26, -20, 12, -38, -23, 20, 22, -17, 20, -1, -3, -8, 15, 
  -27, 6, -38, 11, -4, -4, -17, -6, -19, -2, 14, -38, -17, -35, -16, -2, 2, 22, 21, 1, -2, -8, -24, 11, 8, 15, -6, -19, -4, -38, -17, 26, 1, 27, -35, 29, 34, -12, 17, -7, -23, -17, 35, -18, -17, -8, -3, -12, -21, 18, 21, 18, -1, -30, -25, -27, -13, 8, -52, -26, 16, -29, -29, 24, -29, 20, -16, 33, 23, -36, -3, -8, -27, -23, 29, -22, -7, -44, -5, -20, -20, 18, 19, 14, -20, -8, -28, -20, -20, 7, -36, -16, 10, -19, -44, 24, -10, 20, -13, 27, 26, -30, -15, 3, -10, -26, 26, -12, -11, -39, -26, -29, -20, 12, 18, 18, -23, -7, -30, -19, -35, 2, -59, -23, 14, -13, -31, 27, -20, 13, -16, 19, 20, -20, 1, -3, -20, -31, 18, -19, -27, -4, -24, -1, -12, 12, 20, 18, -39, 0, -26, -4, -26, 5, -43, -8, 12, 3, -28, 18, -21, 11, -18, 14, 22, -7, 18, -11, 10, -4, 11, -26, -60, -6, -7, 0, -4, 5, 22, 10, -9, 2, -24, -4, -19, 10, -22, -22, -3, 17, -11, 15, 
  -19, -22, -40, -3, 5, 6, -40, -2, 20, 12, -1, -49, -52, 26, 16, 12, 3, -9, 1, 31, 15, -13, -1, 25, 15, 9, -7, -30, 3, 14, 18, 2, -21, -7, -52, 29, 25, 7, -24, -2, 9, 10, 33, -25, -35, 30, 29, -21, -17, 3, 6, 27, 20, -9, 1, -27, 4, 2, -29, -45, -12, 9, 20, -4, -8, -26, -49, 29, 21, 2, -18, -2, 14, -1, 28, -28, -34, 33, 24, -19, -4, 8, 7, 18, 19, -3, -16, -26, -1, 8, -32, -42, -19, 4, 24, -5, -15, -8, -66, 30, 24, -6, -7, 1, 22, 7, 21, -13, -26, 20, 16, -10, -32, 7, 6, 20, 14, -1, -18, -3, -25, -4, -43, -59, -20, -6, 29, -6, -15, -4, -43, 19, 19, -10, 0, -16, 12, -10, 19, -10, -26, 21, 15, -13, -24, 6, -6, 21, 29, 4, -7, -8, -21, 7, -35, -47, -18, 7, 14, -9, -10, -4, 9, 17, 18, -14, -1, -15, 13, -8, 13, -31, -11, 21, 9, -3, -10, 4, -1, 22, -12, -4, 5, 14, -21, -4, -12, -24, -17, -1, 9, -11, 
  -34, -12, -22, -10, 8, 11, -18, 1, -18, 20, -39, 25, 7, 14, 17, 18, -33, 5, -5, 28, -14, -37, -14, 3, 23, 3, 8, -80, 9, -3, 22, -42, -45, 9, -19, 31, 25, -1, 21, -19, -7, 17, -22, 10, 13, 13, 24, 11, -21, 14, -19, 21, -22, -28, -4, 14, 43, 16, 22, -45, -23, -2, 22, -39, -32, -4, -26, 30, 14, -11, 18, -25, 1, 17, -10, 19, 10, 9, 24, 20, -37, 12, -12, 19, -22, -22, -33, 23, 29, 26, 12, -46, -39, -7, 23, -29, -20, 1, -9, 29, 13, -17, 17, -33, -9, 20, -14, 11, 11, 9, 23, 20, -26, 13, -15, 15, -31, -22, -15, 33, 34, 21, 22, -53, -27, -7, 23, -17, -23, -3, -11, 17, 12, -11, 10, -40, -4, 26, -11, 10, 6, 17, 14, 16, -38, 4, 3, 23, -31, -18, -5, 23, 31, 22, 19, -31, -32, -10, 22, -25, -13, -7, 17, 17, 2, 7, 28, -25, -35, 30, -10, 14, 9, -13, 12, 18, -9, 7, 11, 28, 0, -9, -5, 7, 25, 13, 4, 0, -9, -10, 7, -2, 
  -47, -18, 22, -1, -2, 17, -6, -8, -20, -11, -3, 12, -35, -4, 7, 27, 36, -51, 15, -61, -57, -11, -48, -3, 4, 0, 0, 36, -53, -10, -38, 0, 11, -17, 33, -62, -37, 50, -9, -8, -25, 29, -5, 18, -1, 32, -9, 29, 24, 15, 17, -37, -28, -10, -7, 15, -6, -2, -2, 24, -42, -26, -53, 1, 28, -18, 31, 3, -61, 42, -15, -9, -18, 32, 2, 22, -2, 23, -26, 24, 29, 19, 15, -29, -15, -1, -13, 4, -3, -12, -25, 20, -32, -31, -34, 1, 28, -35, 38, -11, -74, 36, -12, 4, -21, 22, 8, 24, -11, 26, -34, 11, 27, 17, 20, -10, -23, -8, -12, -1, -25, -20, -20, 12, -24, -31, -38, 4, 23, -36, 39, -8, -72, 31, -10, 0, -14, 7, 2, 12, 3, 17, -32, 11, 20, 11, 17, -12, -26, -5, -25, -4, -32, -8, -5, 11, -21, -27, -42, 1, 13, 22, 12, 3, -29, 18, 0, -22, -22, -43, 5, 17, -8, 34, -2, -35, 1, 18, 23, -1, -28, 5, -30, -14, -18, -15, -22, 19, -16, -32, -6, 1, 
  25, -3, -3, -22, 5, -14, 9, -4, -64, 5, -6, -21, 12, -99, -30, 18, -11, 1, -52, 21, -10, -5, 23, -2, -11, -8, 12, -10, 17, 6, -20, 13, 13, -7, 12, 16, 18, -20, 12, -20, -22, 17, 4, -79, 16, -76, -20, 20, 16, -26, -16, 20, 0, -1, 20, -9, -3, 16, 22, -3, 4, 18, -8, 0, -36, -9, 20, 23, 20, -16, 21, -31, -39, 15, -9, -61, 15, -72, -35, 25, -19, -46, -37, 19, -6, -15, 19, -9, -21, 15, 18, -23, -25, 17, -22, 8, -62, -3, 11, 25, 18, -15, 12, -33, -19, 11, -21, -40, 12, -52, -42, 26, 6, -43, -29, 15, -4, -3, 20, -4, -18, 14, 12, -35, -4, 11, -15, 9, -52, 24, 26, 17, 10, -9, 8, -14, -7, 19, -28, -35, 12, -38, -42, 24, 4, -54, -25, 14, -1, 2, 16, 0, 0, 17, 15, -23, -7, 15, -10, 22, -11, 11, 7, 21, 16, -2, 19, -25, 9, -6, -33, -18, 28, -26, -3, 22, 11, -50, -44, 21, 1, -17, 24, 5, -13, 10, 7, -21, -19, 7, -8, 12, 
  15, 32, 19, -12, 16, -16, 31, -23, -43, 2, -7, -29, 5, -44, -24, -6, 26, -12, -36, -32, -12, -16, 21, 12, -18, -10, 8, 31, 15, 13, -32, 19, 23, 25, 26, 12, 15, -21, 27, 5, -48, 16, -7, -42, 20, -33, -27, -15, 17, 6, -26, -45, 10, -46, 28, 14, -14, -22, -5, 31, 3, 16, -46, 8, -12, 27, 26, 9, 9, -22, 29, 14, -38, 11, -20, -33, 16, -43, -23, -23, 8, 12, -23, -39, 10, -26, 30, 12, -22, -31, -1, 28, 1, 16, -35, 4, -34, 19, 30, 10, 7, -9, 23, 11, -32, 9, -12, -28, 10, -33, -24, -12, 10, 0, -19, -41, 6, -14, 29, 13, -29, -29, -7, 23, -2, 13, -33, 14, -25, 18, 35, 5, 1, -10, 22, 7, -41, 10, -32, -6, 23, -35, -19, -10, 16, 4, -34, -37, 22, -4, 29, 14, -21, -33, 2, 27, 5, 11, -19, -9, -43, 0, 20, -4, 9, -18, 13, 5, -7, -11, -32, -17, 30, -9, -23, -13, 1, 5, -17, -38, -28, 9, 18, -9, -17, -26, -16, 20, -13, 6, -23, -13, 
  36, -8, -34, -28, -4, -7, -25, -8, -51, -20, -3, -16, 17, -43, -47, 37, -46, -14, -66, 3, 20, 22, 28, 15, -24, -27, -9, -14, 9, 13, -9, -55, 30, -37, -38, -39, 25, 36, -11, 10, -71, -36, -7, -47, 1, -24, -27, 28, 19, -28, -86, 2, 3, 19, 21, -1, -7, -15, 17, 36, -16, 20, -5, -64, -33, -31, -21, -34, 18, 44, -2, 14, -76, -10, 3, -18, -3, -21, -19, 39, 17, -1, -66, -2, -2, 26, 15, 8, -15, 0, 13, 30, -27, 13, -9, -83, -12, -64, -21, -19, 21, 37, -9, 17, -69, 0, -16, -15, 3, -3, -21, 30, 16, 4, -43, 1, -3, 26, 7, 7, -15, -13, 12, 21, -38, 17, -5, -66, 13, -22, -27, -16, 10, 33, -12, 14, -25, -1, -14, -15, 9, -14, -17, 29, 12, -3, -25, 3, 7, 28, 12, 13, -9, -5, 6, 21, -16, 14, 0, -19, -7, -3, -32, -16, 14, 14, 11, 14, 10, -6, -3, 0, 20, -7, -4, 28, 5, 0, -20, 1, 19, 16, 18, 2, -10, -5, 3, 21, -4, 21, -4, 29, 
  -2, -9, -5, -21, 1, -5, 0, -1, 6, -17, -18, 23, -11, 21, 33, 10, -1, -15, -49, -20, 32, 7, 8, 9, -22, -27, 10, -7, 10, 27, 28, -69, 18, -8, 4, -13, -9, -16, -14, -14, -12, -22, 21, 14, -5, 12, 31, 5, -24, -80, -35, -36, 17, 19, 13, 4, 31, -34, 24, -2, -50, 21, 19, -58, 11, -21, -1, -44, -16, -21, -24, -31, 8, -26, 27, 20, -16, 15, 32, 9, -28, -88, -40, -40, 21, 14, 19, 18, 46, -52, 27, -4, -43, 21, 29, -49, 24, -13, 9, -65, -29, -10, -8, -33, -5, -20, 24, 17, -13, 22, 22, 9, -26, -86, -36, -21, 15, 14, 14, 5, 44, -47, 22, -18, -49, 13, 22, -32, 9, -12, -3, -49, -18, -13, -14, -34, -10, -20, 18, 6, -3, 1, 19, 8, -29, -55, -36, -23, 25, 8, 4, 0, 42, -20, 27, -8, -44, 19, 9, -6, 5, -9, 6, -60, -11, 6, 4, -31, 7, -13, 31, 13, -9, 6, 21, 1, -9, -55, -43, -11, 43, -1, 5, -14, 32, -30, 18, 6, -10, 17, 4, -17, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 18,192 } };
const TfArray<1, float> quant6_scale = { 1, { 0.01190946064889431, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension7 = { 1, { 16 } };
const TfArray<16, float> quant7_scale = { 16, { 0.00025799736613407731, 0.00023884289839770645, 0.00011803561210399494, 0.00011525189620442688, 0.00019057288591284305, 0.00018723732500802726, 0.00031191747984848917, 0.00013297254918143153, 0.00012726150453090668, 0.00028401377494446933, 0.00019275429076515138, 0.00011307398381177336, 0.00013901281636208296, 0.00011729575635399669, 0.00020490091992542148, 0.00017389676941093057, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int8_t tensor_data8[16*1*3*13] = { 
  /* [0][0][][] */ -83,-32,64,-1,14,1,-5,11,2,2,-1,20,-10, -50,-34,-127,56,-8,-12,3,4,-8,-8,3,9,-3, -74,-72,40,-26,4,-8,8,-23,10,-12,-8,-2,-12, 
  /* [1][0][][] */ 100,-22,45,-4,6,-8,5,-8,37,-6,-1,-4,-14, 75,-14,71,10,-5,0,-17,-5,35,-16,13,2,0, -38,-127,60,-36,14,-6,-16,11,-6,12,-9,-14,0, 
  /* [2][0][][] */ 44,-21,20,-52,-58,9,35,99,15,-37,-26,-10,7, 127,29,-15,-92,-61,15,41,59,5,-58,-37,-34,32, 79,99,-25,-71,-97,16,22,37,-2,-21,-10,-55,35, 
  /* [3][0][][] */ -6,76,52,80,-30,-110,-71,-68,-14,-1,20,37,-3, 4,109,125,54,-71,-66,-127,-69,-32,-21,41,70,59, 17,60,62,-3,-67,-26,-70,-14,-23,5,-24,21,20, 
  /* [4][0][][] */ -7,-124,55,9,-49,37,-45,27,-4,3,12,7,-15, -49,7,124,35,-42,24,-86,1,-18,-19,8,17,-14, -127,-36,117,-18,14,28,-48,45,-17,5,5,-1,13, 
  /* [5][0][][] */ 70,-127,76,47,-54,40,25,-20,8,28,1,-12,1, 121,-67,49,58,-48,-11,30,-18,-29,21,1,-34,12, 77,-47,-52,33,14,-40,29,27,-17,-15,11,-4,-9, 
  /* [6][0][][] */ -84,-87,22,42,-12,17,6,13,13,-9,-3,-3,-3, -127,4,-51,-14,32,19,-13,1,0,19,-12,1,-2, 63,-30,-4,-78,14,20,4,-1,4,3,-13,-7,13, 
  /* [7][0][][] */ 29,25,-44,72,65,-104,-26,127,-25,-48,47,57,-57, 38,28,-69,23,63,-73,-94,98,76,-80,-27,89,-42, 46,37,-27,-1,22,-7,-76,82,59,-36,-18,27,2, 
  /* [8][0][][] */ 11,62,79,-101,-60,16,-2,-29,-19,-6,27,16,-17, -26,90,93,-84,-101,35,16,-54,-27,16,22,44,-30, -12,86,76,-127,-74,63,-5,-99,22,49,51,-9,-44, 
  /* [9][0][][] */ 30,-54,-32,-9,3,20,12,22,-6,-7,-3,9,-13, 41,78,-55,-13,14,30,30,15,0,-8,-16,12,9, 72,-127,-11,-48,39,16,4,12,-13,-4,6,-14,-19, 
  /* [10][0][][] */ -127,9,67,53,1,11,-7,7,-18,-21,27,-17,-13, -37,63,68,54,41,23,4,14,40,-30,32,-26,28, -46,113,72,65,12,27,-15,33,-12,-28,17,-35,4, 
  /* [11][0][][] */ -41,80,-11,-86,42,34,-20,-45,53,63,-10,-28,19, -57,65,-54,-89,73,47,-68,-36,69,48,-44,-52,55, 92,127,-76,-83,116,15,-76,49,79,6,-106,34,3, 
  /* [12][0][][] */ 50,57,-80,33,59,-114,35,72,-6,-26,-9,16,-29, 6,93,-102,92,-5,-72,45,64,-97,10,84,-52,49, 78,-4,-64,127,-57,-15,102,-10,-42,21,5,-32,62, 
  /* [13][0][][] */ -64,3,51,-22,-39,-64,-9,-62,17,33,30,-10,-29, 37,83,72,29,-48,-62,-61,-43,53,78,4,11,-10, -18,127,-32,1,-68,-101,-40,19,41,30,-4,8,29, 
  /* [14][0][][] */ -121,41,-45,23,-39,35,1,6,-12,-15,16,-6,-10, -52,-86,61,-14,29,-4,25,-1,10,0,-11,-3,5, -87,-127,-84,-3,-4,-2,-16,-14,-6,-1,11,-9,-15, 
  /* [15][0][][] */ 21,58,-80,121,-60,20,25,7,-41,16,-18,4,-14, -20,-24,0,85,-113,23,46,-89,38,7,-34,10,0, 52,-127,87,7,-115,36,7,-8,23,-11,-21,-6,-7, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,13 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0055684102699160576, 0.0051549957133829594, 0.0025475870352238417, 0.0024875055532902479, 0.0041131740435957909, 0.0040411818772554398, 0.0067321793176233768, 0.002869974123314023, 0.0027467112522572279, 0.006129927933216095, 0.0041602556593716145, 0.0024404991418123245, 0.0030003422871232033, 0.0025316185783594847, 0.0044224187731742859, 0.0037532499991357327, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[32*1*3*16] = { 
  /* [0][0][][] */ 7,-14,6,43,-13,39,-31,-16,23,-7,-6,-2,-4,23,-25,12, -127,-43,6,-11,-66,-10,-53,-10,-6,-7,12,-3,9,13,-85,-2, -53,-57,0,-2,-76,-21,-29,14,-15,3,-10,-1,11,14,-29,-13, 
  /* [1][0][][] */ -36,-56,0,8,-20,-127,21,-44,50,-6,-3,-1,-35,3,-40,-31, -99,-19,1,0,-33,-127,-18,-16,-2,-9,-7,13,-50,19,-81,-27, -33,-10,-1,8,-12,-56,-107,17,-18,6,-32,-7,24,2,-79,-38, 
  /* [2][0][][] */ -5,-61,-10,-127,-38,-8,10,13,-27,7,-14,-2,12,-78,1,-18, 2,-52,-4,-124,-55,-85,4,2,-6,5,-20,15,-1,-41,1,-39, 3,-44,1,-45,-30,-76,7,0,17,13,-25,8,-13,-26,4,-36, 
  /* [3][0][][] */ 2,7,10,-21,7,-62,-4,-16,6,7,43,33,-74,-7,0,-127, -11,1,-14,15,28,-25,-11,33,-93,34,-22,2,-12,-13,-11,-72, -18,-15,16,3,-2,4,-18,-2,-86,5,100,-116,79,-47,-39,17, 
  /* [4][0][][] */ -127,-12,3,-79,-21,-8,-55,2,-8,30,-92,7,-5,-47,-114,6, -127,7,-4,-17,21,-3,-84,-1,-3,-18,-18,-5,-6,-13,-113,5, -51,9,-17,33,20,5,-74,-1,-2,-5,25,-2,-7,19,-54,-2, 
  /* [5][0][][] */ -9,23,-19,-6,-25,6,10,-72,-10,5,-12,-62,-92,-2,2,-29, -26,-15,-44,-18,-35,0,-24,-82,-47,-1,-70,-66,-112,-34,-14,-27, 8,108,-51,-80,-37,-10,2,-87,-101,1,-127,-120,-68,-66,-7,-18, 
  /* [6][0][][] */ 29,4,-51,-127,23,-8,7,-15,-65,-21,-38,-66,-27,-57,22,-12, 12,6,-29,-56,17,17,0,9,11,-5,-116,-26,-15,-8,7,-3, 24,8,-61,-46,14,21,-21,-4,-40,-11,-96,-65,-25,-46,18,-16, 
  /* [7][0][][] */ 2,-7,-29,-5,-3,-26,14,-9,-90,-2,1,-19,-45,-5,-1,-45, 2,-6,-25,-57,2,-15,9,-49,-57,-2,-9,-10,-21,-40,0,-35, 0,-6,-34,-42,1,-11,0,10,-127,-4,0,-15,-7,-42,9,-28, 
  /* [8][0][][] */ 9,-13,3,20,-5,36,2,7,-22,2,13,-22,0,4,13,-5, -3,-11,2,24,-12,-8,-4,45,-17,3,4,-35,-15,25,6,-28, -43,-9,16,1,-23,-56,-14,0,4,3,2,127,-16,7,-35,-79, 
  /* [9][0][][] */ -15,4,12,-2,-16,-36,11,41,3,4,4,23,-24,0,-19,-33, -12,-2,0,-2,-8,-51,-14,-43,5,-4,-1,5,-127,6,-11,-33, 6,-2,-4,-4,-3,-49,-12,-75,17,-15,7,-3,-111,2,18,-17, 
  /* [10][0][][] */ -33,9,-4,16,-18,27,-24,36,-12,-19,-23,-7,-8,1,-127,-15, -105,9,1,-4,-25,-45,-47,-1,-2,-14,-25,5,-39,-4,-114,-60, -30,-3,-5,-7,-8,-88,-81,-3,19,-23,-22,-1,-95,1,-17,-67, 
  /* [11][0][][] */ -61,8,8,23,-8,-12,-92,-63,-1,-127,21,-115,16,8,-66,26, -108,16,9,5,47,-28,-62,-93,22,-51,-16,-61,-112,2,-85,-42, -72,38,0,0,23,12,-3,-68,8,55,-14,56,-95,-23,-34,0, 
  /* [12][0][][] */ -12,2,-30,13,-11,1,-32,-19,-33,-14,11,-37,-24,-15,-4,1, -12,28,-45,-8,2,15,-34,-44,-83,-2,-24,-127,-31,-38,-13,-6, 0,11,-72,-25,9,18,-26,-23,-109,-17,-10,-122,-42,-31,-10,-15, 
  /* [13][0][][] */ -81,-29,34,-23,-127,7,-60,2,-4,2,-24,2,5,2,-47,6, -17,-15,-17,-31,-74,3,-31,2,-10,-1,-2,-7,-5,-5,-4,3, 8,-12,-19,-72,-29,-2,18,-14,-32,-5,-18,-28,-6,-70,18,7, 
  /* [14][0][][] */ -2,-33,-32,10,-4,-19,9,4,-4,-25,30,-10,-8,-4,-3,-10, -6,-29,-127,9,-1,-58,-5,-18,2,-44,-23,-1,-20,4,-5,-6, -5,-21,-28,10,-10,-23,-12,-10,5,-42,50,5,-2,0,-7,-2, 
  /* [15][0][][] */ 8,-18,-58,-2,11,-10,-2,4,-70,-26,11,-63,-1,-5,5,6, -6,-16,-95,8,-1,-15,-8,-5,-25,-101,20,-100,-4,-5,-6,4, 0,-7,-25,0,18,-5,-13,-13,-5,-127,20,-58,-4,0,-1,-3, 
  /* [16][0][][] */ 11,-44,-108,-9,13,-44,31,-36,-9,-28,24,-20,-38,-36,17,-29, 19,-9,-53,-6,-3,10,-23,-1,13,-85,9,12,-11,-23,-19,7, -83,11,-5,26,-6,21,-59,24,21,-81,-17,7,0,44,-127,10, 
  /* [17][0][][] */ 18,-20,-68,-9,20,-29,15,-29,-26,-16,8,-13,-127,-14,19,-14, -1,-7,-53,-18,1,-25,-2,-5,-45,0,14,-9,-54,-16,-2,22, 20,-14,-38,-14,-3,-43,20,2,-49,21,14,2,-37,-22,21,17, 
  /* [18][0][][] */ 1,23,-21,8,25,8,-16,-43,11,-118,20,-39,-73,3,0,12, -2,-7,-78,3,4,-16,-21,-41,2,-105,5,-64,-43,-16,-3,-7, 3,-11,-127,-18,9,-35,-4,-64,-22,-37,8,-75,-34,-29,7,-3, 
  /* [19][0][][] */ -29,-2,-17,-1,-4,1,-27,-46,-22,-4,56,-67,-4,-15,-18,-5, -127,0,4,-13,-28,16,-104,7,-39,-1,-9,-18,10,-32,-125,-22, -54,32,2,-67,-78,-4,-101,15,-26,15,-40,-2,-2,-50,-56,-34, 
  /* [20][0][][] */ -64,-66,5,-18,-86,-24,8,21,-10,16,-2,8,16,-12,-63,-8, -100,-15,17,-7,-63,-12,-38,11,-1,17,-60,2,8,-2,-127,40, -43,23,12,14,42,3,-47,13,2,1,2,-2,-16,6,-48,27, 
  /* [21][0][][] */ -19,-3,44,21,-5,21,-20,2,-7,-11,58,-14,16,25,-24,0, -77,-14,2,-56,-86,12,-22,11,0,37,-54,-9,0,-49,-14,-5, -43,-16,15,-86,-127,7,-35,3,-9,25,-2,-5,4,-84,10,13, 
  /* [22][0][][] */ 5,-1,-118,-22,2,-14,14,-5,-51,-32,-40,-17,-20,-8,11,2, 10,-25,-120,-27,5,-44,4,0,-31,-13,-9,10,6,-18,5,-45, 0,-13,-46,16,22,-59,-1,-11,1,-127,27,2,-14,8,-7,-63, 
  /* [23][0][][] */ 7,-6,9,15,-11,15,-2,-102,-2,-6,-19,-46,-62,-10,-5,-21, -19,-27,14,-8,-38,-36,2,-100,88,4,-13,-6,-111,-17,-29,-37, -95,-14,1,-75,-127,-32,5,-25,-18,3,-86,58,-108,-15,-40,-38, 
  /* [24][0][][] */ -23,15,-4,5,21,3,-24,1,2,-10,9,4,3,-1,-30,17, -58,5,-3,2,3,1,-127,3,-1,-4,-9,-6,-4,6,-48,8, -70,2,11,-1,-7,15,-66,8,-1,9,-4,-5,3,0,-62,4, 
  /* [25][0][][] */ -17,-44,12,16,-14,-58,-6,-82,56,-10,-4,-4,-72,-2,-10,-79, -14,-57,23,20,-9,-90,-39,-127,-47,-12,0,-39,-88,-4,-7,-65, -12,-68,0,-2,-20,-110,-33,-52,105,-2,-6,23,-100,2,-16,-75, 
  /* [26][0][][] */ -3,-23,-39,2,1,-127,-4,-28,12,-90,-4,-2,-38,17,4,-72, -10,4,-24,2,2,-85,-17,2,-11,-46,0,20,32,13,-48,-66, -26,-21,10,-2,-20,-29,-11,9,-23,0,-9,5,10,15,-69,7, 
  /* [27][0][][] */ -9,2,3,-34,-44,5,-14,0,22,12,-45,6,4,-17,-7,1, -2,1,-14,-127,-34,1,-23,4,-25,-5,-36,1,1,-38,-2,0, -1,8,-18,-60,-17,4,-18,5,-68,1,-18,-1,1,-62,-1,-5, 
  /* [28][0][][] */ 10,-15,-93,-11,5,2,-6,21,-4,-107,-3,37,42,17,-4,-10, 19,1,-101,8,-33,6,-8,41,-46,-127,-33,6,-7,4,7,19, 7,38,-59,12,13,5,-17,23,-5,-94,-34,-4,64,-8,-7,48, 
  /* [29][0][][] */ 10,-76,-7,-59,30,-50,30,-56,-16,-23,-39,30,-98,-56,13,-15, -20,14,15,-95,-32,1,54,-37,-15,14,-73,-2,-106,-48,-26,-23, -60,69,19,-85,-40,18,-74,-57,7,4,-127,4,-73,-36,-62,-31, 
  /* [30][0][][] */ -91,21,52,11,2,8,-66,-53,20,12,-3,-77,3,5,-98,8, -36,7,-3,10,0,12,-127,-70,8,-33,1,-92,4,20,-26,20, 13,17,-13,4,4,-5,7,-38,-14,-29,12,-98,4,-4,14,6, 
  /* [31][0][][] */ -11,-18,-66,32,5,51,-15,29,-13,-62,15,-6,14,0,-17,-5, -63,-14,-113,31,19,-27,-59,27,-19,-127,46,16,10,5,-85,2, -124,11,-68,42,2,12,-54,-38,9,-38,23,32,-24,-12,-90,32, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant9_scale = { 32, { 0.0096249831840395927, 0.0067814155481755733, 0.012847356498241425, 0.0054088160395622253, 0.0093365469947457314, 0.004849407821893692, 0.0052813785150647163, 0.014657124876976013, 0.0059386957436800003, 0.013764968141913414, 0.011245212517678738, 0.0070486883632838726, 0.0088731711730360985, 0.013019249774515629, 0.011382191441953182, 0.012778186239302158, 0.0072811036370694637, 0.0062689958140254021, 0.010413613170385361, 0.0092136403545737267, 0.0091538708657026291, 0.0071930093690752983, 0.011559737846255302, 0.0062768207862973213, 0.016850154846906662, 0.0054113822989165783, 0.012010988779366016, 0.016475550830364227, 0.0061148139648139477, 0.0058505479246377945, 0.006969766691327095, 0.0057826675474643707, } };
const TfArray<32, int> quant9_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[32] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension10 = { 1, { 32 } };
const TfArray<32, float> quant10_scale = { 32, { 0.0003198808990418911, 0.00022537652694154531, 0.00042697464232333004, 0.00017975895025301725, 0.00031029488309286535, 0.00016116733604576439, 0.0001755236298777163, 0.00048712128773331642, 0.00019736919784918427, 0.00045747094554826617, 0.00037372828228399158, 0.00023425917606800795, 0.00029489485314115882, 0.0004326874332036823, 0.00037828070344403386, 0.00042467581806704402, 0.00024198337632697076, 0.00020834653696510941, 0.00034609055728651583, 0.00030621013138443232, 0.00030422373674809933, 0.00023905560374259949, 0.00038418135954998434, 0.00020860659424215555, 0.00056000537006184459, 0.0001798442390281707, 0.00039917844696901739, 0.00054755562450736761, 0.00020322240015957505, 0.00019443966448307037, 0.00023163626610767096, 0.00019218369561713189, } };
const TfArray<32, int> quant10_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int8_t tensor_data11[32*1*3*32] = { 
  /* [0][0][][] */ 5,10,12,-1,6,-7,-8,-28,-5,10,6,-2,9,28,-33,-51,-30,-20,-39,16,-3,8,-25,-1,-4,9,7,15,3,0,11,-20, 2,-8,23,-22,-7,-5,1,-5,0,4,-21,-9,17,14,-59,-25,-33,0,-24,-3,-15,7,-16,4,-31,-2,-7,9,9,-2,-4,-22, -81,-127,23,-34,-88,0,6,-9,-15,-2,-73,-16,10,21,-58,-3,-10,-3,-14,-45,-86,-11,-15,-77,-13,-85,-88,17,13,-18,-24,-51, 
  /* [1][0][][] */ -50,-74,-11,2,-127,-19,-2,1,4,-42,-46,-32,-26,-24,7,22,-1,2,8,-1,-88,-72,3,-87,-87,-30,-52,-83,11,-31,-82,1, -33,-2,7,-9,-46,-13,-5,-4,7,10,-10,-67,-13,2,-10,-14,2,3,2,-79,-16,-67,-9,-6,-52,-10,1,-5,32,27,-67,-17, 9,6,5,-27,-7,-30,-17,-15,2,7,23,-24,-26,-88,-7,-26,12,-11,-23,-4,-11,-6,-3,-10,11,15,2,-14,0,10,-21,-3, 
  /* [2][0][][] */ -64,-73,3,-30,-6,18,5,4,-127,-43,35,-48,1,-10,-47,-14,1,3,9,16,-82,-74,-13,-87,-69,-52,-80,-2,-11,22,-4,-83, 11,-48,-41,-13,19,18,-2,-14,-5,-93,22,1,-1,13,-98,-47,0,-16,-12,13,-6,4,-43,-4,4,-44,-26,6,-5,8,16,-35, 20,-9,-6,-2,17,2,-29,-37,7,-14,-14,-6,-11,20,-17,-42,15,-61,-42,11,8,15,-23,-10,8,-22,10,22,20,-5,13,8, 
  /* [3][0][][] */ -6,3,5,19,29,-52,-126,-80,-5,-2,11,11,-14,-3,-8,-29,-35,-79,11,-4,13,5,-57,-2,3,-1,-17,23,-7,-14,3,1, -24,1,-64,11,20,-29,-32,-3,-53,3,15,4,-14,-14,17,-10,-30,-3,33,-40,20,-25,-21,-6,-6,15,-10,-37,-10,-34,3,17, -20,-28,4,20,-15,14,-7,13,-100,-17,-33,7,1,-23,25,13,-53,10,16,6,-24,-19,-5,-127,-20,-15,-84,-57,-32,18,21,8, 
  /* [4][0][][] */ 1,6,2,10,24,-21,-93,-127,2,-5,-6,3,-11,1,-1,-7,-4,-36,-14,1,7,6,-33,10,-13,5,9,12,11,-4,-1,5, -6,6,-19,0,28,-1,-44,-53,-12,-1,-5,-5,19,-28,10,14,-9,-52,9,7,3,-13,-25,-6,-1,-4,9,-15,-2,5,-4,8, 1,-3,-39,7,42,-29,-26,-6,9,-4,14,6,-5,-84,13,8,20,-16,4,7,5,-23,-18,3,16,-2,5,-65,-11,-6,0,24, 
  /* [5][0][][] */ -8,11,3,8,2,5,-20,-56,-19,14,-2,12,12,20,-11,-31,-16,-45,6,14,8,7,-127,-1,-1,-8,-12,17,1,6,22,11, -22,-32,7,-21,-10,6,5,5,5,-8,-22,-15,12,3,-4,-13,9,1,4,-27,-50,-37,3,-5,-13,-4,3,-16,-22,-2,0,-4, 10,12,5,-1,-21,-75,-42,-47,12,0,7,-4,-77,-8,4,-4,22,-22,-43,-5,2,15,10,11,0,11,7,-14,-10,-4,-27,-1, 
  /* [6][0][][] */ -57,-117,-23,-15,19,29,7,5,-52,-127,-56,-27,8,-11,-36,-20,-4,-4,-16,9,20,6,-16,-87,-12,-6,-86,15,-34,13,-12,-7, -9,10,-79,-26,9,-25,-39,-67,-25,-26,-7,26,-9,-2,-6,-36,-6,-86,-20,-22,-1,-4,-14,-4,19,5,-43,0,-18,21,25,1, 9,-4,-100,-12,-8,-82,-28,2,-8,-4,5,17,-27,5,11,2,-8,-34,26,-15,-4,-19,-44,-4,8,20,-11,-4,26,-31,33,14, 
  /* [7][0][][] */ 2,67,-43,16,-6,-65,-90,-104,17,24,40,-21,-15,24,5,-2,21,-84,-23,10,7,-22,-98,8,-26,25,29,16,27,-28,13,16, 4,36,-11,-26,-12,-19,14,7,4,9,23,-24,-17,0,4,-1,-34,-6,-1,-50,-50,-97,9,62,-115,-9,55,-19,41,-21,-9,-13, 57,30,33,-13,-42,-9,15,15,6,31,31,-35,-4,-4,-11,-1,28,-3,6,-112,-107,-127,20,73,-120,117,47,-18,11,-25,-36,-24, 
  /* [8][0][][] */ -79,-25,9,9,-52,-3,4,12,-72,-17,-38,-58,-12,-12,-4,4,-4,8,1,-82,-92,-127,-7,-99,-96,-83,-20,-36,33,-25,-65,-23, 40,-22,-24,-49,-11,-6,31,-3,5,-103,-27,11,6,21,-2,-15,30,-3,-21,-39,-63,-22,-9,4,-8,9,-34,1,22,-14,-41,-23, 10,14,0,9,-9,-38,-30,-30,11,-46,-16,29,-36,1,-53,-76,-23,-32,-97,-6,13,27,-42,35,4,0,-12,19,-10,-9,-27,-34, 
  /* [9][0][][] */ -53,-127,-4,-69,-79,13,5,-7,-30,-19,-98,-76,4,16,-10,-26,-3,-2,-24,-25,-45,-13,-9,-75,-58,-30,-68,0,6,55,4,-70, -1,16,-51,-13,-22,2,0,-34,22,-16,9,-24,13,-15,-2,-10,10,-17,11,-32,-121,-88,-13,-6,-16,1,34,-30,-10,-23,9,5, 15,19,-26,12,-58,-14,2,11,9,14,11,-15,-54,6,1,-5,1,-6,-2,-10,10,2,2,-5,0,-15,37,-48,8,-20,-32,15, 
  /* [10][0][][] */ 5,10,24,3,16,-16,-56,-75,-2,7,-8,8,-3,20,-31,-25,-104,-39,-41,3,4,12,-90,13,-21,17,-32,34,-8,15,11,-9, -31,-3,3,15,10,5,-19,-9,-24,-1,-4,-15,15,-17,14,24,-31,2,-14,50,-9,-12,6,-9,-32,-54,-26,2,-14,9,-19,6, -25,-56,-49,18,34,13,-20,-9,-67,-40,-9,-17,40,-19,16,19,-50,-11,-4,41,-5,-2,-37,-127,-19,-124,-126,61,-22,-18,-9,8, 
  /* [11][0][][] */ 18,-6,-27,-2,-14,4,5,-4,-8,-112,-5,-25,-4,34,14,7,30,-6,6,27,-11,12,20,-29,20,-44,11,-26,-3,4,12,4, 10,-26,10,-5,9,-25,-36,-107,-6,11,15,-53,-16,24,-60,-45,30,-36,-127,25,1,31,-77,-54,11,-85,7,10,-16,-31,0,-31, -6,-37,28,-31,19,-4,-13,-32,-5,17,-21,-29,-13,17,-61,-82,54,-23,-50,28,14,21,23,-35,-40,-8,-43,15,-23,-23,3,-33, 
  /* [12][0][][] */ 1,-83,7,-3,-83,7,0,1,-32,-12,-127,-37,-9,2,-2,0,8,3,2,8,-80,-5,0,-68,-17,-96,-12,-19,-2,1,-78,-32, 6,-6,1,13,4,-6,-3,3,4,-13,-5,-54,-25,0,1,-1,1,2,-5,9,15,3,-3,-24,13,-44,8,-28,6,0,10,3, -1,-19,-6,8,-2,-13,-3,8,14,3,12,-27,-13,10,2,-4,1,-2,-8,12,20,7,-7,-32,9,-27,23,-5,19,5,7,10, 
  /* [13][0][][] */ -36,-27,-46,9,-11,29,-8,-18,-12,3,-28,-6,9,14,12,10,12,-5,4,13,-80,-20,11,-27,-7,5,2,21,-53,-19,8,19, 10,2,-38,0,-18,-42,-28,-29,2,-1,-3,14,-24,-15,-5,14,-5,-34,-30,12,-11,11,10,-1,12,11,7,-28,-17,-40,-16,-3, 12,9,-2,5,9,-42,-127,-92,3,4,15,12,-73,13,-40,-97,-53,-46,-105,19,4,15,-63,9,-1,0,0,25,-6,-17,-8,-18, 
  /* [14][0][][] */ 19,6,-48,-7,12,-117,-97,-127,11,-8,-5,19,-32,31,3,-3,21,-34,-8,-25,-1,-2,15,6,11,15,21,-12,6,-27,24,11, 7,15,-20,13,-20,-20,11,-14,1,-24,-18,-9,-12,22,-14,-10,10,-4,-4,-17,-6,2,-16,16,-12,1,-1,3,-3,-4,-1,-16, 1,6,-22,20,16,16,7,-44,-61,-34,-29,-23,1,15,-9,-3,5,-23,-81,8,8,24,-49,-18,-21,-95,11,14,2,29,6,-17, 
  /* [15][0][][] */ -4,1,-44,2,-11,-30,-13,-7,-7,-30,-9,19,-12,-25,-3,-1,22,-9,0,-27,16,-23,2,-5,-6,-5,17,-38,30,-17,11,-2, -22,1,-127,-20,-12,3,-5,-8,-53,-55,-21,17,4,-39,-10,-1,7,-8,0,11,17,-16,0,-34,1,-15,18,-44,14,-2,4,-4, -11,-21,-37,6,15,17,6,1,-21,-59,9,23,25,-99,-22,-7,5,-4,3,22,-5,-43,0,-37,5,-3,-6,-8,7,13,6,7, 
  /* [16][0][][] */ -10,24,-7,5,32,31,15,-60,-4,4,-2,15,23,-33,-80,-81,-19,-39,-38,-10,17,-19,-113,8,-2,1,-1,-11,-11,5,7,-26, 6,-5,-56,13,2,11,-2,-43,3,-6,12,14,-5,-38,-34,-98,-29,-53,-24,-30,-7,-23,-69,2,10,-5,17,-27,-15,-31,-5,19, 15,-1,-5,8,-12,-64,-127,-127,13,12,26,9,-97,9,-25,-76,6,-51,-52,13,9,16,-59,7,20,2,2,7,11,0,-7,3, 
  /* [17][0][][] */ -7,-22,91,-3,38,-103,-67,-44,36,67,42,-61,-68,-15,5,21,0,6,28,43,14,31,-18,-54,-8,-64,-1,48,1,21,-50,13, -16,-13,17,-2,19,-89,-123,-87,61,74,27,-61,-127,-34,21,-33,17,-17,-28,23,39,-6,-66,-31,-16,-4,-27,1,-44,48,-45,-9, -40,0,63,-3,66,-13,-3,-22,15,55,30,-90,-34,-17,28,7,-58,-8,43,-119,32,-13,-42,-13,-60,24,-50,-40,-52,24,21,-25, 
  /* [18][0][][] */ -127,-52,-25,-113,-41,0,17,-11,-20,-112,-47,-76,15,-15,-19,24,-19,1,19,-6,-93,-56,4,52,-61,4,-57,-43,51,31,-19,-93, -23,49,-5,-69,-30,1,-1,-14,-2,11,-32,-23,23,-46,-25,11,-56,2,8,-11,19,-8,-25,28,-34,-15,-41,-44,4,12,13,-111, -12,11,-2,-16,5,-10,14,-11,29,34,3,7,-8,-51,-59,17,-21,-1,31,26,8,5,2,33,-34,65,-24,6,8,27,-6,-104, 
  /* [19][0][][] */ 15,36,-19,45,0,-36,-4,21,20,-14,-22,15,-10,-10,0,-14,-1,-6,-38,14,-24,-9,0,16,-5,19,34,44,-12,-28,-45,3, -1,18,-20,44,6,-127,-36,-59,-28,-32,-32,-65,-57,-6,-18,-8,-17,-62,-123,11,8,4,-22,5,4,-67,35,16,32,-43,-9,7, -14,-72,-44,5,13,-41,-25,14,-86,-40,-30,33,12,10,-5,28,-28,-6,9,-21,20,-9,18,-114,0,-87,-39,4,-6,-114,39,-1, 
  /* [20][0][][] */ -88,-1,-15,14,-37,-5,9,13,-18,2,-12,-25,4,-5,1,15,29,6,-7,-35,-55,-126,17,-49,-45,-44,5,-103,-19,12,-100,26, -58,24,-40,-28,-13,-44,6,29,-37,7,37,39,-46,-30,-12,-5,32,-6,-9,-84,2,-127,5,-11,7,12,-11,-116,35,-3,2,0, 36,2,-26,-90,-43,-32,-81,-31,-10,14,33,39,-22,-78,-40,2,27,-69,-16,-34,-47,18,-49,24,32,33,-65,17,-11,-18,37,-19, 
  /* [21][0][][] */ -127,-59,8,10,-33,-8,-1,4,-2,-2,-35,-8,-17,4,7,2,9,2,-11,-3,-45,-50,5,-9,-33,7,-19,-28,0,-6,-28,-4, -16,-3,-4,11,-2,-14,-20,-20,-6,-7,-23,9,-5,15,9,11,4,4,-2,0,10,7,0,5,3,-4,-13,0,-9,-6,7,6, -14,-25,-1,-2,-15,4,-15,-15,-4,10,-7,11,14,27,-17,-9,5,-2,-7,19,-7,0,-10,-27,1,-23,-15,10,-3,-6,2,-2, 
  /* [22][0][][] */ -4,-127,31,-54,1,16,-3,5,-88,-9,-72,-13,-22,3,20,-23,-54,12,-15,-93,-58,-46,-3,-91,46,23,-124,-33,-44,15,-2,-67, 38,-43,20,-23,-12,4,2,5,-4,-5,14,-33,-8,4,6,-20,-7,-4,-28,-11,-16,-29,-9,-112,0,-77,-27,-9,-34,18,-1,9, 16,-38,13,-21,12,8,2,16,-3,25,26,-8,-4,19,4,-8,2,2,-32,-62,-28,-61,-5,-41,14,-23,-4,-21,9,-5,0,52, 
  /* [23][0][][] */ -25,-26,-6,2,-55,2,0,0,-10,-31,-65,-51,-13,-17,8,4,24,6,1,-1,-2,4,10,-49,-8,-34,14,-55,-11,25,-54,-11, -12,-31,-16,10,50,-7,-24,-47,-33,2,-15,-16,-9,0,-26,-56,14,-11,-35,11,8,10,-92,-70,5,-51,-22,-5,-27,15,22,-3, -14,-127,4,-32,-10,-8,-13,-8,-29,-26,-82,-17,-12,8,-7,-10,-6,0,3,-78,-26,-31,-8,-104,2,-23,-66,1,-18,24,35,-6, 
  /* [24][0][][] */ 10,-3,-4,-20,22,3,-2,-47,-37,-2,-11,-5,6,3,-69,-40,-43,-29,-1,1,5,1,-82,-3,5,-7,-27,10,-12,14,22,-16, 2,-14,-48,-76,-1,9,8,4,-127,-37,-19,0,16,1,-45,-16,11,-7,0,-14,-17,4,-5,-8,-34,23,-24,19,-18,-17,1,-13, -81,-23,-33,-38,7,5,0,-1,-95,-77,36,-33,33,-13,-36,2,-21,-8,1,13,-82,-48,7,-72,-89,-57,-101,16,14,13,-26,-58, 
  /* [25][0][][] */ -3,-8,-21,21,-15,-15,-2,-37,-40,-58,-73,4,15,7,-30,-11,-18,-13,-8,-21,43,10,-21,-94,4,-127,48,12,33,-40,1,0, -31,-59,-11,-27,4,-24,1,-28,-6,-41,-35,21,1,-14,-29,-11,-63,-8,15,-84,-40,-37,-29,13,-4,-4,11,-16,-10,-9,7,-13, -72,17,18,5,-17,-6,-1,-14,14,-18,-34,24,-19,-28,-2,-4,5,0,30,-85,66,-27,-10,11,-13,10,39,-51,3,27,-1,-16, 
  /* [26][0][][] */ 5,-1,3,-5,22,-22,-127,-77,-3,14,0,-2,-6,4,-4,-31,-13,-71,-10,-11,7,4,-50,-12,19,-1,11,-10,4,-18,1,3, -9,2,-18,-19,-2,3,-8,2,-4,-2,17,5,-9,-2,-16,-61,-4,-7,-6,10,2,-9,-39,-10,16,3,13,-15,-7,-5,-3,-5, -29,-2,-17,-29,0,20,-5,-8,-15,14,40,-2,-6,10,-14,-35,-42,-1,8,42,-1,-8,-33,-18,31,0,-7,-1,-50,15,15,-13, 
  /* [27][0][][] */ 2,-58,-35,-6,3,15,-5,-17,-16,-62,18,9,18,-39,-1,-6,4,-17,24,12,-28,0,-14,-61,22,-76,-43,-11,-16,17,16,4, 13,-28,4,-33,-7,-16,5,-68,13,43,23,-30,20,-18,-1,-9,0,-113,-35,28,0,5,-28,-25,7,-31,-23,14,-10,-19,5,2, 28,5,31,-24,-5,-69,-44,-127,11,30,36,-41,-36,-18,19,11,-27,-66,-26,27,2,-5,-41,-12,0,10,-7,-3,-19,-12,-17,9, 
  /* [28][0][][] */ 3,6,11,-7,12,-71,-64,-96,-5,9,5,-9,-107,25,-4,-100,-3,-49,-127,-1,2,1,-43,5,-7,9,-5,6,2,0,8,-14, 4,-2,4,0,-6,-22,-15,-10,-4,1,-3,0,-83,-1,9,-24,-1,-7,-18,12,-7,-4,-8,-9,-7,-1,6,-8,8,-1,10,-3, 10,7,-9,8,-8,-97,-68,-78,15,1,12,14,-93,-20,2,-3,29,-34,-35,-3,-2,-6,21,12,1,1,17,-2,11,-15,-11,1, 
  /* [29][0][][] */ 22,-120,1,6,-13,-3,3,8,-79,-55,-82,32,-6,-13,1,-1,12,1,-3,-13,2,12,5,-127,27,-44,-6,-10,-1,1,12,35, 8,-17,-6,0,-3,-6,-4,-2,-11,-53,-18,15,-2,14,4,6,-7,0,-5,4,-23,9,5,-18,-1,3,2,-8,-11,10,16,-6, 22,1,-7,3,-2,-14,-20,-4,4,-14,15,11,-2,3,1,5,14,-11,-8,-2,-3,2,4,-7,39,-2,-1,-2,12,-34,17,32, 
  /* [30][0][][] */ -74,-55,5,-1,-125,-31,-1,6,12,-8,-83,-22,-68,11,18,14,8,3,-3,-93,-116,-31,12,11,-34,17,15,-27,-6,-49,-127,-5, 3,11,-21,11,5,-33,-9,-7,4,-32,-26,12,-7,-24,28,23,5,2,-4,-1,-53,-9,24,2,18,8,10,-9,-1,-23,-27,9, 11,2,-5,9,5,-63,-126,-83,5,-10,6,-7,-33,27,-16,-24,3,-41,-102,18,1,16,36,-1,13,-4,4,10,-15,3,-16,-7, 
  /* [31][0][][] */ -73,7,14,1,34,0,5,4,2,3,-26,-50,-13,8,-14,1,-60,7,6,-28,5,-8,4,-1,-127,-3,-20,-4,-13,21,-43,-124, -23,7,7,5,7,2,0,-7,3,-2,-21,-17,3,-2,-58,-32,-16,-3,-9,3,0,2,-13,8,-29,1,-9,13,-27,13,-39,-104, -4,6,11,4,14,-12,-15,-48,8,4,1,-16,-4,22,-9,-10,-14,-20,-69,-1,-2,1,-19,18,2,1,-2,12,4,23,7,13, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 32,1,3,32 } };
const TfArray<32, float> quant11_scale = { 32, { 0.014004112221300602, 0.013626555912196636, 0.012720195576548576, 0.011302406899631023, 0.01425026822835207, 0.01963183656334877, 0.011662441305816174, 0.0057738181203603745, 0.011264965869486332, 0.0095072556287050247, 0.010650136508047581, 0.0087004369124770164, 0.016343122348189354, 0.013434424996376038, 0.011825298890471458, 0.01535220630466938, 0.012494929134845734, 0.0049437996931374073, 0.0071641230024397373, 0.0084380004554986954, 0.0066994796507060528, 0.017790002748370171, 0.010036150924861431, 0.0090252961963415146, 0.011645012535154819, 0.0093389116227626801, 0.014473835006356239, 0.011766785755753517, 0.016502920538187027, 0.011032359674572945, 0.011906690895557404, 0.015096941962838173, } };
const TfArray<32, int> quant11_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 1, 46, 13, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[3] = { 1, 46, 16, };
const TfArray<1, int> tensor_dimension13 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data14[4] = { 1, 46, 1, 16, };
const TfArray<1, int> tensor_dimension14 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 1, 23, 16, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data16[3] = { 1, 23, 32, };
const TfArray<1, int> tensor_dimension16 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data17[4] = { 1, 23, 1, 32, };
const TfArray<1, int> tensor_dimension17 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data18[4] = { 1, 1, 12, 32, };
const TfArray<1, int> tensor_dimension18 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data19[3] = { 1, 12, 32, };
const TfArray<1, int> tensor_dimension19 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data20[4] = { 1, 12, 1, 32, };
const TfArray<1, int> tensor_dimension20 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,1,46,13 } };
const TfArray<1, float> quant21_scale = { 1, { 0.046332318335771561, } };
const TfArray<1, int> quant21_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,46,16 } };
const TfArray<1, float> quant22_scale = { 1, { 0.078475117683410645, } };
const TfArray<1, int> quant22_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<3, int> tensor_dimension23 = { 3, { 1,46,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.078475117683410645, } };
const TfArray<1, int> quant23_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,46,16 } };
const TfArray<1, float> quant24_scale = { 1, { 0.033234436064958572, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,46,1,16 } };
const TfArray<1, float> quant25_scale = { 1, { 0.033234436064958572, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,23,1,16 } };
const TfArray<1, float> quant26_scale = { 1, { 0.033234436064958572, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,1,23,16 } };
const TfArray<1, float> quant27_scale = { 1, { 0.033234436064958572, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,1,23,32 } };
const TfArray<1, float> quant28_scale = { 1, { 0.18367668986320496, } };
const TfArray<1, int> quant28_zero = { 1, { 87 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<3, int> tensor_dimension29 = { 3, { 1,23,32 } };
const TfArray<1, float> quant29_scale = { 1, { 0.18367668986320496, } };
const TfArray<1, int> quant29_zero = { 1, { 87 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<3, int> tensor_dimension30 = { 3, { 1,23,32 } };
const TfArray<1, float> quant30_scale = { 1, { 0.026464516296982765, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<4, int> tensor_dimension31 = { 4, { 1,23,1,32 } };
const TfArray<1, float> quant31_scale = { 1, { 0.026464516296982765, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<4, int> tensor_dimension32 = { 4, { 1,12,1,32 } };
const TfArray<1, float> quant32_scale = { 1, { 0.026464516296982765, } };
const TfArray<1, int> quant32_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<4, int> tensor_dimension33 = { 4, { 1,1,12,32 } };
const TfArray<1, float> quant33_scale = { 1, { 0.026464516296982765, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfArray<4, int> tensor_dimension34 = { 4, { 1,1,12,32 } };
const TfArray<1, float> quant34_scale = { 1, { 0.16140471398830414, } };
const TfArray<1, int> quant34_zero = { 1, { 64 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const TfArray<3, int> tensor_dimension35 = { 3, { 1,12,32 } };
const TfArray<1, float> quant35_scale = { 1, { 0.16140471398830414, } };
const TfArray<1, int> quant35_zero = { 1, { 64 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<3, int> tensor_dimension36 = { 3, { 1,12,32 } };
const TfArray<1, float> quant36_scale = { 1, { 0.040309466421604156, } };
const TfArray<1, int> quant36_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const TfArray<4, int> tensor_dimension37 = { 4, { 1,12,1,32 } };
const TfArray<1, float> quant37_scale = { 1, { 0.040309466421604156, } };
const TfArray<1, int> quant37_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const TfArray<4, int> tensor_dimension38 = { 4, { 1,6,1,32 } };
const TfArray<1, float> quant38_scale = { 1, { 0.040309466421604156, } };
const TfArray<1, int> quant38_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const TfArray<2, int> tensor_dimension39 = { 2, { 1,192 } };
const TfArray<1, float> quant39_scale = { 1, { 0.040309466421604156, } };
const TfArray<1, int> quant39_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const TfArray<2, int> tensor_dimension40 = { 2, { 1,18 } };
const TfArray<1, float> quant40_scale = { 1, { 0.21767990291118622, } };
const TfArray<1, int> quant40_zero = { 1, { 46 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const TfArray<2, int> tensor_dimension41 = { 2, { 1,18 } };
const TfArray<1, float> quant41_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant41_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,12 } };
const TfArray<1, int> outputs0 = { 1, { 21 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 21,8,7 } };
const TfArray<1, int> outputs1 = { 1, { 22 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 22,13 } };
const TfArray<1, int> outputs2 = { 1, { 23 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 23,2 } };
const TfArray<1, int> outputs3 = { 1, { 24 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 24,14 } };
const TfArray<1, int> outputs4 = { 1, { 25 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 25 } };
const TfArray<1, int> outputs5 = { 1, { 26 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 26,15 } };
const TfArray<1, int> outputs6 = { 1, { 27 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 27,9,10 } };
const TfArray<1, int> outputs7 = { 1, { 28 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 28,16 } };
const TfArray<1, int> outputs8 = { 1, { 29 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 29,3 } };
const TfArray<1, int> outputs9 = { 1, { 30 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 30,17 } };
const TfArray<1, int> outputs10 = { 1, { 31 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 31 } };
const TfArray<1, int> outputs11 = { 1, { 32 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 32,18 } };
const TfArray<1, int> outputs12 = { 1, { 33 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 33,11,10 } };
const TfArray<1, int> outputs13 = { 1, { 34 } };
const TfLiteReshapeParams opdata14 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs14 = { 2, { 34,19 } };
const TfArray<1, int> outputs14 = { 1, { 35 } };
const TfLiteAddParams opdata15 = { kTfLiteActRelu };
const TfArray<2, int> inputs15 = { 2, { 35,4 } };
const TfArray<1, int> outputs15 = { 1, { 36 } };
const TfLiteReshapeParams opdata16 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs16 = { 2, { 36,20 } };
const TfArray<1, int> outputs16 = { 1, { 37 } };
const TfLitePoolParams opdata17 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs17 = { 1, { 37 } };
const TfArray<1, int> outputs17 = { 1, { 38 } };
const TfLiteReshapeParams opdata18 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs18 = { 2, { 38,1 } };
const TfArray<1, int> outputs18 = { 1, { 39 } };
const TfLiteFullyConnectedParams opdata19 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs19 = { 3, { 39,6,5 } };
const TfArray<1, int> outputs19 = { 1, { 40 } };
const TfLiteSoftmaxParams opdata20 = { 1 };
const TfArray<1, int> inputs20 = { 1, { 40 } };
const TfArray<1, int> outputs20 = { 1, { 41 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 608, (TfLiteIntArray*)&tensor_dimension0, 598, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension21, 598, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 736, (TfLiteIntArray*)&tensor_dimension22, 736, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension23, 736, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 736, (TfLiteIntArray*)&tensor_dimension24, 736, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension25, 736, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 736, (TfLiteIntArray*)&tensor_dimension26, 368, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension27, 368, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 736, (TfLiteIntArray*)&tensor_dimension28, 736, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension29, 736, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 736, (TfLiteIntArray*)&tensor_dimension30, 736, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension31, 736, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 736, (TfLiteIntArray*)&tensor_dimension32, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension34, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension36, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension38, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension39, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension40, 18, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension41, 18, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_ADD, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 42;
  for(size_t i = 0; i < 42; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 21; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 21; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  41, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 21; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
