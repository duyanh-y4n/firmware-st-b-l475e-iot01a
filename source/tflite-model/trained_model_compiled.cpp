/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 16.05.2021 20:52:45

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 2112;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.047561004757881165, } };
const TfArray<1, int> quant0_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 416, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[16] = { 1254, -4297, -10141, 1339, -2923, -5265, -1986, -11449, -10234, -2435, -3763, -7794, -2154, -7791, -2098, 2071, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const TfArray<16, float> quant2_scale = { 16, { 0.00041476378100924194, 0.00021482691226992756, 0.0001929479039972648, 0.00031129512353800237, 0.00022708716278430074, 0.00024463425506837666, 0.00025898410240188241, 0.00016269941988866776, 0.00015275213809218258, 0.00029953249031677842, 0.00026703026378527284, 0.00017406085680704564, 0.00027976644923910499, 0.00018646102398633957, 0.00021908858616370708, 0.00032420767820440233, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[32] = { -1887, -2575, -1320, 3191, 1067, -1015, 80, -465, -243, -1615, 282, -83, 375, -349, -559, -520, 2079, -1501, -554, 820, -251, 1463, 3123, 1464, -1104, 1406, 170, -1143, 998, 345, 1485, -843, };
const TfArray<1, int> tensor_dimension3 = { 1, { 32 } };
const TfArray<32, float> quant3_scale = { 32, { 0.0005021024844609201, 0.00024998644948936999, 0.00051477015949785709, 0.00031123243388719857, 0.00061174924485385418, 0.00056764495093375444, 0.00059094460448250175, 0.00024130460224114358, 0.00057471240870654583, 0.00046725381980650127, 0.00075734162237495184, 0.0004810237733181566, 0.00047904154052957892, 0.00061610230477526784, 0.00063792860601097345, 0.00036298172199167311, 0.00036607289803214371, 0.0003513696719892323, 0.00031994841992855072, 0.00058013899251818657, 0.00061305024428293109, 0.00039466595626436174, 0.00031626981217414141, 0.00059264921583235264, 0.00038377245073206723, 0.00029783017816953361, 0.00053396006114780903, 0.00027201880584470928, 0.00023403490195050836, 0.00062354991678148508, 0.00044405658263713121, 0.00041121529648080468, } };
const TfArray<32, int> quant3_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[15] = { 6500, -373, -2770, -1320, 37, 180, 315, -935, 2000, -522, -37, -304, 2158, -3601, -1788, };
const TfArray<1, int> tensor_dimension4 = { 1, { 15 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00050035677850246429, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[15*416] = { 
  -41, 14, -11, -3, 2, 10, 1, 1, 19, -22, -7, -24, 0, -9, -71, 9, 11, -24, -9, -14, -21, 17, 21, 2, -52, -14, -1, -1, 13, -24, 7, 23, 3, -6, -5, 4, -8, -2, -21, 4, -27, 6, -11, 7, -11, -20, -63, 11, 8, -4, 23, -19, -67, 30, 13, -55, -70, -68, 1, 28, 19, -32, 17, 3, -25, -22, -11, 1, -20, 10, 13, -4, -59, -7, -21, -31, -18, -62, -74, 17, 17, -10, -14, -34, -87, -15, 6, -48, -104, -20, 4, -8, 11, -22, 17, 3, -30, -7, -22, -30, -23, -10, 4, 3, -57, 2, -22, -7, -22, -70, -26, 4, -5, -29, -16, -16, -55, -14, 16, -67, -97, -59, -5, -2, 16, -13, 24, 12, -56, -55, -31, -22, -39, -6, 6, -12, -50, -7, -16, -17, -40, -56, -17, 3, -7, -39, -32, -9, -23, -6, 29, -58, -91, -42, 10, -10, 22, -24, 23, 13, -59, -31, -53, -14, -19, -12, 10, -7, -53, -6, -26, -17, -18, -26, -10, -10, 3, -29, -25, -13, -66, 3, 23, -58, -112, -42, 25, -8, 24, -34, 19, -8, -45, -32, -32, -15, -21, 7, -14, 16, -72, -2, 0, -46, -39, -71, -64, 10, 7, -29, -17, 5, -92, -6, 27, -87, -85, -32, -2, -34, 20, -25, 15, 4, -16, -1, -19, -11, -35, 10, -5, 13, -51, 14, -7, -12, -39, -21, -49, 8, -8, -8, -10, -18, -62, 12, -6, -69, -86, -46, -25, -11, 19, 1, 14, 4, -10, -14, -43, -23, -44, -9, 9, -7, -55, 12, -13, -4, -28, -37, -65, 10, 10, -19, -16, -19, -72, 1, 15, -83, -87, -90, -4, -33, 21, -32, 24, -4, -31, -29, -22, -32, -41, -3, 4, -11, -86, -4, -25, -6, -8, -48, -55, 8, -10, -28, -24, -12, -70, 22, 10, -58, -127, -51, 0, -12, 21, -45, 11, -4, -23, -1, -19, 0, -7, -13, 6, -17, -78, -8, -8, 6, -12, -28, -78, -18, -6, -36, -1, -23, -59, -2, -3, -47, -32, -38, -12, -18, 32, -16, 6, -11, -27, -13, -17, 3, -6, 15, 14, 2, -29, -3, 2, -10, -9, -28, -60, 14, -4, -65, -14, -18, -15, -5, 12, -47, -50, -58, -4, -30, 35, -13, 7, 6, -21, 2, -34, 39, 12, 4, -1, -18, -32, -19, -35, -17, 43, -33, -45, 10, -39, -63, -8, -8, -12, 18, -2, 12, -45, -14, -1, -47, 23, -54, 11, 4, 
  8, 18, 3, -4, -13, -2, 8, -6, -1, 4, 0, 0, 22, 4, 12, -12, 6, -5, 4, -1, 4, -13, 6, 13, -34, -12, 2, -7, 0, 1, 1, -2, 23, 7, -1, -14, -11, -1, 17, -9, -9, -8, 23, -3, 8, 1, 6, 3, -9, -14, 10, 2, 16, -6, 21, -1, 8, 0, 3, -26, -2, 5, 10, 3, 18, 10, -4, -16, -16, -3, 9, -10, 7, -9, 16, -3, -6, 2, 10, -2, -2, -4, 14, 0, 2, -5, 21, -10, 1, 15, 2, -10, -2, 3, 6, -2, 22, 16, -6, -25, 0, 3, 7, -9, -11, -14, 12, -2, 4, 7, 4, 6, -9, -4, 16, -5, 9, -8, 11, 1, 11, 17, 12, -30, -3, 12, 7, 0, 14, 14, -1, -12, 3, 7, 12, -18, -2, -1, 13, -4, -2, 6, -1, 0, 1, -2, 13, -3, 7, -2, 16, -3, 5, 12, 5, -7, 5, 3, 6, -4, 15, 10, -4, -12, -8, 5, 9, -5, 3, -10, 10, -4, 4, 2, 0, -3, -8, -6, 18, -6, 10, -4, 16, -3, 7, 13, -1, -6, 2, 10, 9, 0, 11, 17, -6, -7, -2, 0, 6, -15, 7, -33, 11, -9, 8, 11, -3, 6, -4, 2, 19, -1, 9, -11, 15, -5, 2, 7, 10, -8, 4, 3, -1, 6, 13, 13, -3, -4, -11, 6, 9, -6, 3, -14, 17, -11, 6, -4, -5, 4, 1, 4, 18, 6, 10, -14, 11, -3, -1, 6, 6, -5, -1, 1, 5, 4, 16, 10, 0, 6, 0, 7, 12, -6, -6, -26, 14, -3, 2, 9, -5, 5, 1, -12, 14, -5, 7, -8, 11, 2, 3, 9, 5, 1, 11, 8, 10, 1, 4, 9, -1, -2, 2, 12, 9, -21, 8, -4, 11, 2, 11, 6, -2, -2, -5, -17, 14, -9, -3, -13, 14, 11, -1, 5, 8, -4, 11, 7, 7, 9, 14, 9, 2, -1, -5, -4, 2, -13, 10, -21, 7, 5, 15, 0, 10, 0, -1, 3, 17, -3, 15, 3, -3, 1, -9, 3, 2, 5, 7, 11, 6, 27, 12, 5, 12, 13, -3, 13, 7, 5, 5, 0, 13, -16, -11, -2, -16, 3, -2, -7, 9, 5, 0, -12, -15, -1, 3, -15, -4, 2, 2, 6, 0, -1, 29, 1, -17, -1, -17, -6, -4, 4, -11, -12, 15, 4, -12, 27, -2, -6, -25, 2, 39, -3, 3, 0, 10, -6, 34, -15, 20, -1, -10, 14, -7, -2, 
  -65, -44, -73, 1, -14, 19, 0, 45, -26, 6, 17, -24, -35, -6, 4, -9, 1, 2, -25, -17, -1, -13, -12, -14, 3, -29, -28, 6, 11, 19, 9, 29, -17, 23, -9, -7, 16, 13, 16, 25, -31, -3, -20, 22, -17, 12, 9, -6, 21, 13, -45, -9, -26, 4, -20, 13, -2, -28, -13, 28, 0, 4, -4, 5, 4, 19, -24, -8, 20, 4, -13, 27, -62, 16, 22, -7, -17, 7, 9, -13, 2, 4, 13, -20, 0, 6, -13, -17, 3, -3, -1, 35, 9, 7, 22, 22, -1, 18, -11, -9, 13, 6, -6, 28, -60, 4, -7, 3, -19, -2, 7, -21, 1, 7, 3, -24, -4, 16, -22, -11, -2, -12, 24, 37, 11, -4, 18, 17, -14, 21, -20, -11, 12, 14, 10, 22, -18, 9, 3, 2, -35, 5, 13, -27, 20, 18, 8, -20, -2, 19, -36, -29, -4, -12, 2, 31, 8, -11, 18, 11, -12, 12, -17, -14, 13, 15, 9, 27, -20, 18, 3, -4, -37, 3, 9, -5, 9, 17, 3, -31, 3, 25, -22, -15, -5, -2, 13, 27, 4, -7, 17, 17, -5, 13, -1, 3, 7, 1, 11, 30, -23, 17, 3, -5, -22, 6, 6, -10, 12, 22, -5, -35, 11, 24, -45, -17, -5, 3, 22, 30, -5, -23, 4, 13, -10, 2, -13, 1, 1, 0, 22, 20, -21, 24, 7, -4, -31, 5, 6, -10, 16, 12, -9, -36, 7, 26, -16, -8, -14, 5, 24, 18, -3, -13, 12, 12, -18, 8, -14, 3, 1, 26, 22, 32, -31, 19, 9, -7, -49, 8, 9, -12, 17, 25, 2, -21, 17, 24, -16, -14, -14, 5, 17, 17, -8, -13, 9, 14, -5, 9, -4, -6, 10, -16, 21, 41, -35, 29, 9, -5, -20, 7, 19, -12, 11, 29, 0, -22, 13, 32, -23, -5, -8, 10, 19, 17, 4, -1, -1, 13, -13, 4, -5, 2, -2, -20, 7, 39, -22, 19, 10, -9, -17, 20, 19, -13, 17, 22, 8, -17, 16, 27, -12, 6, -8, 12, 27, 15, -10, -1, 12, 3, 2, 12, 0, -10, -6, 5, 25, -8, -6, 20, 17, -16, -19, -9, 14, -14, 19, 22, -2, -24, -2, 32, -1, -5, 18, 22, 16, 10, -22, 9, -13, 11, -35, -3, 10, -5, -19, -2, 29, 6, 3, 12, 52, 23, -45, -10, 32, 3, 28, 5, -3, -13, 22, -7, -8, 4, 17, 7, 6, -9, -17, 25, -18, -9, 
  45, -9, 26, -2, 0, 18, 14, -6, -17, 2, -3, 23, -11, -5, -14, -37, 5, 5, 10, -10, 16, -58, -9, 19, -87, 41, -21, 4, 0, -16, 7, -34, -13, -11, 22, -8, 14, 16, 3, 14, -52, 1, 21, -12, 1, 11, -5, -15, 9, -6, -5, -16, 0, -24, -34, -3, 18, 32, 5, 16, 3, -3, -16, -17, -15, -10, 21, -16, 10, 22, -3, 10, 25, -2, 8, 6, 17, 19, 0, -18, 0, -9, -4, -13, 0, -25, -23, -5, 15, 19, 2, -7, 2, 1, -5, -18, -6, -12, 19, 2, 20, 21, -7, 16, 22, 0, 9, -2, 17, 14, -3, -28, -4, -12, -22, -5, -2, -19, -28, -5, 10, 16, -2, -5, 10, -6, -9, -14, 0, -11, 12, 31, 21, 24, -6, 7, 18, 10, 9, 6, 18, 8, 2, -4, -17, -10, -20, -9, -3, -23, -49, 1, 11, 19, -28, -15, -1, 4, -19, -18, -2, -8, 19, 21, 19, 21, -9, 9, 18, -4, 14, -8, 17, 5, -1, -6, -26, -12, -12, -6, -4, -13, -38, 2, 12, 12, -3, 1, 9, 1, -7, -21, -7, -20, 20, 30, 17, 14, -8, 12, 20, -2, 19, -3, 19, 4, 5, -10, -22, -13, -12, -7, -8, -24, -40, -1, 10, 11, 0, -15, 18, 9, -13, -16, 2, -7, 14, 28, 15, 23, -9, 15, 19, 2, 17, -5, 23, -1, -10, -5, -19, -7, -8, -8, -15, -10, -33, 5, 12, 17, 5, -5, 15, 1, -15, -29, 1, -18, 12, 28, 17, 24, -25, 3, 19, 5, 19, -1, 26, 5, -7, -8, -27, -11, -13, -8, -8, -3, -40, 3, 12, 15, 0, -7, 17, -9, -45, -29, 1, -26, 13, 29, 19, 24, -9, 14, 15, -4, 18, 2, 22, 6, -5, -12, -28, 0, 5, 3, -20, -8, -32, 8, 10, 11, 5, -4, 17, 2, -23, -25, -3, -14, 10, 29, 19, 38, -6, 0, 15, 3, 22, 2, 8, 6, 6, -12, -22, 10, -12, -6, -13, -4, -49, 7, 9, 16, 11, -2, 4, -3, -32, -16, 31, -9, -9, 23, 17, 5, -30, 5, 2, 14, 14, 7, 9, 11, 9, -16, -22, -24, -1, 2, 2, -4, -40, 5, 21, 17, 4, -36, 2, -4, -11, 10, -5, -11, 5, 11, 19, 7, -8, -9, 16, -14, -16, 2, -43, 11, -10, -24, -7, 24, -15, -9, 12, 0, 6, -2, 36, 9, 9, 21, -7, 10, -53, -1, 
  19, 23, 20, 17, -10, 0, 14, -39, -16, -22, -24, -11, 4, -61, 6, 2, -13, 12, -3, -3, -2, 10, 0, 12, -52, -6, 8, -6, 11, 13, 2, 16, -42, -8, -1, -19, -41, -11, 22, -39, -20, -15, -13, -79, -90, -65, -70, 9, 20, -3, 17, 0, 14, -11, 19, 34, -37, 16, -15, -26, -26, 12, 7, 4, -6, -67, -32, 11, -65, -2, 28, -17, -14, -29, 21, -21, -25, -43, -17, 4, 16, 7, -5, -11, 11, 7, 18, 31, -2, 22, 20, -34, -26, 5, -15, 2, 5, -26, 2, 17, -50, -9, 19, -36, -6, -39, 27, -29, -18, -40, -8, -3, 9, -2, 15, -9, 10, 7, 16, 18, -5, 15, 21, -45, -26, 5, -22, 5, 5, -5, -8, 19, -31, -11, 33, -34, -9, -16, 25, -32, -15, -12, 2, 12, 19, 8, -4, -5, 5, 9, 8, 11, -12, 17, 7, -48, -13, -7, -27, 3, 4, 3, -22, 10, -33, -6, 13, -54, -4, -21, 18, -12, -18, -10, -5, -2, 18, 7, 14, -32, 9, 4, -2, 17, -8, 17, 14, -17, -26, -1, -27, 7, -5, 2, -13, 14, -41, -17, 20, -52, -6, -33, 15, -23, -16, -13, -3, -21, 21, 9, 0, -15, 16, 10, -7, 13, -17, 12, 25, -38, -18, -7, -15, 13, 3, 2, -13, 4, -24, -9, 22, -31, -15, -22, 18, -10, -35, -9, 8, -26, 21, 0, 10, -18, 14, 10, -26, 11, -13, 12, 21, -31, -17, -19, -11, 14, 1, 3, -10, 0, -21, -10, 31, -32, -25, -24, 18, -16, -26, -14, 4, -5, 16, 10, 8, -23, 14, 15, -43, 8, -16, 8, 22, -1, -24, -14, -1, 18, -11, 3, -8, 7, -16, -19, 22, -10, -8, -21, 15, -23, -10, -10, 5, 4, 21, 7, 4, -15, 27, 16, -19, 20, -2, 9, 21, -11, -15, 3, 2, 17, -21, 6, -1, 5, -13, -29, 20, -26, -3, -13, 10, -11, -10, -12, 9, 1, 18, 10, 0, -5, 21, 12, -14, 13, 2, 4, 21, -13, -4, 2, -1, 14, -10, 8, 6, -3, 22, -13, 16, -32, 8, 4, 19, 4, -5, -20, 3, 4, 29, 24, 15, -20, 14, 17, 2, 15, 12, 21, 25, -22, -23, 6, -11, 13, 0, 2, 4, -17, 20, 4, -7, 14, 8, 15, 9, 17, -30, -6, 23, 5, 34, 4, 10, -16, 5, -4, -17, 3, 31, 7, 13, 7, -2, 8, -19, 3, 
  19, 3, 34, 6, -11, 14, 2, -3, -53, 2, -2, 15, 14, 3, -7, 8, -3, -41, 14, 9, -10, -1, -3, -77, 19, -6, -6, 7, -6, 1, 12, -43, -10, 24, 2, 17, 13, 20, -22, -8, 44, 7, -30, -39, 4, -17, -17, 7, 2, -40, -27, 4, 3, 7, -9, -4, 6, -18, -12, -11, 1, 5, -13, -48, -8, 12, -15, 11, 10, 31, -12, -9, 25, 9, -14, -28, 10, -8, 0, 5, 38, -24, -9, 5, -8, -25, -6, 5, 15, -15, -7, -40, -1, -1, -26, -32, -27, 11, -8, 28, -4, 23, -21, -5, 27, 16, -12, -42, 15, -7, 1, 0, 31, -27, -4, 6, -3, -6, -20, 18, 6, -32, -30, -14, 1, 5, -51, -25, -13, 7, 3, 22, 2, 19, -20, -4, 18, 7, -5, -28, 9, -12, -11, -6, 24, -20, -4, 9, -2, -3, -14, 16, 11, -17, -24, -26, -1, -1, -45, -23, -23, 9, 1, 12, 3, 24, -13, -9, 19, 16, 5, -20, 12, -17, -9, 8, 25, -24, 3, 7, -2, -10, -20, 11, 14, -22, -8, -13, -2, 16, -52, -21, -8, 3, 2, 22, 9, 27, -12, -4, 18, 9, 4, -16, 16, -6, -7, 10, 24, -30, -4, -2, 2, -12, -21, 13, 7, -20, -30, -27, -10, 15, -35, -36, 4, -10, 6, 19, 2, 25, -29, -3, 16, 10, -5, -11, 20, 5, -12, 9, 22, -34, -12, 7, 2, -12, -28, 13, 13, -19, -28, -21, -14, 21, -49, -13, -9, -1, -4, 19, 6, 17, -23, -17, 15, 5, -4, -28, 20, -2, 3, 1, 21, -17, -4, 6, -6, -3, -26, 11, 10, -12, -26, -18, -12, 19, -46, -28, -11, -12, 7, 17, 1, 16, -15, -25, 18, 13, -8, -31, 19, 4, -7, 7, 14, -20, 3, -2, 1, -10, -16, 16, 12, -11, -10, -12, 1, 2, -44, -28, 4, -16, -2, 9, -6, 33, -10, -26, 22, -1, 9, -27, 21, -30, -14, 8, 18, -7, -4, 3, 6, 1, -9, 23, 20, -21, -24, -16, -11, 14, -18, -32, 11, 3, -24, 10, -57, -24, 10, -3, 25, 6, 0, 5, -2, -9, 16, 16, 17, 5, -7, 6, -5, -12, 9, 20, -11, -16, -23, -20, -5, 11, -20, -14, -92, -5, 5, 2, 8, -17, -14, 4, 10, -10, -38, 2, 6, -31, -17, 13, 21, 3, 7, 12, 1, -4, 3, 6, -8, -10, -33, -11, 4, 2, -19, 4, 
  -43, 2, -13, -17, -1, -9, -8, -28, 8, 11, -2, -1, 7, 20, 41, 9, -5, -6, 4, -7, 28, 25, -11, -17, 22, -11, -11, -12, -14, 3, -1, -41, 0, 15, 9, -11, -13, -13, 9, -10, -23, 15, -9, 27, -12, 22, 28, 8, 7, 6, 6, -6, 22, 20, -18, -25, 1, 2, -11, -11, -4, 7, 0, -28, -13, 17, 0, -8, 17, -21, 5, -4, -25, 17, -19, 20, -19, 23, 25, 14, -21, 7, -9, -2, 15, 21, -30, -26, -15, -15, -22, 33, -6, 6, -10, -21, -14, 20, -4, -23, 18, -27, -13, -18, -35, 11, -22, 15, -21, 21, 21, -3, -22, 8, -17, -1, 13, 19, -8, -10, -16, -9, -5, 27, -4, 6, 9, -18, -18, 20, -1, -33, 20, -29, -10, -11, -25, 19, -31, 15, -14, 16, 26, 2, -14, -1, -8, -2, 19, 17, -9, -13, -17, -7, -9, 21, -7, 9, 12, -9, -15, 15, -3, -22, 21, -17, -8, -1, -44, 14, -28, 11, -26, 19, 29, -15, -16, 4, -13, -4, 13, 21, 1, -17, -3, -16, -11, 24, -4, 9, 11, -6, -1, 19, 5, -29, 21, -12, -17, -12, -28, 24, -34, 14, -29, 16, 23, -12, -16, 9, -28, 5, 17, 18, 5, -7, -18, -15, -8, 22, -1, 13, 7, -5, -7, 15, -4, -34, 11, -33, -14, -10, -26, 11, -41, 17, -23, 22, 18, -13, -18, 4, -24, -1, 12, 8, 24, -8, -12, -6, -19, 28, 3, 2, 6, -7, -18, 8, 10, -51, 15, -19, 5, -7, -32, 13, -54, 0, -24, 10, 16, -20, -24, 11, -22, 6, 12, 11, 19, -20, -9, -19, -30, 24, -5, 14, 14, -1, 6, 8, 7, -42, 13, 0, -21, -2, -47, 20, -32, 8, -32, 22, 14, -7, -18, 0, -5, 10, 13, -13, 4, -33, -16, -32, -45, 15, -4, 4, 17, -11, -7, 14, 6, -46, 8, -11, -9, -4, -30, 21, -59, 5, -36, 14, 30, -5, -20, -27, -27, 11, 9, -9, 5, -22, -12, 5, -22, 20, 2, 1, 17, -10, -12, 20, 4, -22, 13, 19, -25, -17, -43, 11, -10, -11, -45, 15, 24, -17, 6, -43, -12, 7, 12, 13, 5, -40, -21, 11, -11, 17, 10, 0, 11, -22, 49, 7, 8, -32, 18, -8, 9, -12, -45, 15, -79, -34, -34, -21, 18, 6, -2, -21, -23, -2, -6, 6, -13, -28, -43, -42, -15, 22, 4, 1, 4, 3, 
  20, -70, -12, -8, -8, -35, -39, 18, -24, 5, 5, 20, 9, 33, -16, -4, -1, -41, 5, -4, 22, -6, 3, -24, -81, -36, -4, -2, -14, 2, 7, -47, -26, -16, -13, 9, 4, -30, -12, 14, 45, 13, 7, 25, 22, 24, -8, -18, -31, -22, -1, 0, 28, -10, 4, -29, 8, -34, -14, 4, 1, 10, -7, -6, 8, -28, -11, 9, 0, -27, -31, 11, 32, 7, -40, 9, 14, 21, -4, -11, 13, -33, -6, 4, 16, -11, -11, 17, 15, 0, -19, -35, 12, 1, -27, -6, 0, -26, -25, 7, 4, -31, -29, 19, 26, 14, -10, 11, 22, 14, -5, -12, 16, -27, -10, 6, 9, -7, 9, 13, 11, -5, -36, -13, 13, -5, -26, -10, 3, -22, -15, 4, 5, -31, -43, 11, 21, 12, 1, 19, 20, 19, -14, 0, 15, -50, 3, 0, 8, -21, -22, 10, 12, -10, -29, -9, 6, 3, -44, -13, 13, -13, -7, 7, 5, -34, -37, 20, 17, 11, -1, 15, 20, 7, -15, 5, 17, -34, -7, 1, 14, -15, -30, 13, 14, -7, -24, -10, 11, 11, -33, -6, 2, -25, 3, 7, 5, -26, -21, 20, 20, 20, 0, 16, 19, 17, -3, -2, 13, -26, -6, -7, 16, -28, -21, 12, 8, -5, -29, -7, 14, 2, -19, -26, 2, -19, -8, 4, 8, -40, -32, 14, 22, 6, -4, 22, 27, 13, -8, 7, 14, -22, -1, 4, 9, -27, -41, 16, 10, -11, -34, -10, 9, 9, -7, -18, 13, -24, -5, 5, 6, -38, -40, 11, 18, 5, -4, 9, 28, 20, -19, -3, 10, -29, -1, -8, 7, -17, -20, 10, 11, -10, -32, 0, 2, 9, -43, -4, -3, -4, 2, 10, 4, -10, -25, 10, 19, 5, 5, 12, 24, 19, -24, 3, 14, -15, -8, -2, 5, -23, -14, 11, 12, -4, -11, -11, -5, 0, -20, -9, 0, -17, 9, 7, -8, -40, -18, 15, 25, -1, 0, 18, 21, 9, -9, 9, 10, -27, 6, 4, 1, -18, -8, 18, 18, -14, -19, -11, -2, 7, -41, -1, -24, -51, -9, 13, -20, -23, -27, 14, 15, -28, -10, 4, 27, 12, -16, -9, 4, -14, 3, 1, 19, -16, -5, 18, 19, 0, -31, -3, -3, 1, -24, -3, -27, 6, -1, 0, -21, -1, -25, 4, 30, -9, -59, -2, -38, 21, -77, 2, -1, 10, -28, -16, 18, -7, 3, 1, -7, -12, -57, 1, -3, -7, -1, 6, 
  15, -17, 1, 4, -2, -17, 4, -23, 10, -1, 1, 25, -25, -60, -22, 16, 2, 29, 7, 23, -14, 21, 9, 29, 24, 26, 27, -11, -14, -22, 5, 29, 6, -42, -6, -9, -17, -27, -30, -13, 15, -26, -19, -70, -16, -32, -36, 3, -10, 15, 3, 24, -28, 15, -16, 34, 7, 12, 4, -11, -8, -19, -12, 23, -2, -13, -8, -4, -12, -25, 3, -9, -2, -5, -23, -22, -29, -44, -15, 2, 2, 19, -59, 15, -13, 6, -14, 32, 10, 3, 2, 2, -8, 1, -23, 22, -8, -23, 10, 1, -18, -25, 8, -8, -2, -25, -23, -1, -36, -33, -29, 4, -3, 16, -22, 20, -20, -7, 1, 23, 12, -1, 0, 17, -18, -10, -9, 15, -13, -12, 8, -1, -22, -30, -6, -20, 4, -15, -21, 20, -28, -34, -17, 0, -8, 17, -30, 14, -26, 13, 0, 16, 9, 6, -1, 13, -12, -21, 16, 21, -14, -18, 6, -2, -14, -29, -17, -9, -2, -46, -29, 20, -24, -32, -27, 6, -5, 18, -22, 20, -37, 6, -1, 18, 13, 6, 3, 13, -22, -24, 22, 21, -3, -17, 5, -21, -12, -49, -15, -18, -10, -41, -32, 13, -24, -60, -32, -9, -16, 16, -28, 14, -43, 3, 11, 14, 8, 10, -22, 6, -19, -16, 22, 15, -2, -18, 12, -15, -24, -20, -7, -46, -2, -44, -23, 11, -35, -58, -12, -1, -3, 11, -16, 22, -35, 2, 9, 18, 10, 8, -3, -3, -21, -2, 17, 19, -6, -12, 21, -17, -11, -43, -15, -17, 7, -36, -28, 5, -5, -19, -40, 2, -8, 16, -28, 14, -49, -6, 10, 17, 8, 4, -1, -6, -5, -8, 20, 9, -12, -17, 14, -7, -12, -13, -7, -27, -4, -8, -26, 15, -9, -23, -30, 3, -7, 10, -16, 14, -29, -1, -2, 9, 4, 0, -17, 8, -19, -22, 25, 1, 8, -14, 2, -9, -5, -25, -14, -26, 2, -2, -21, 8, -2, -56, -40, -7, -25, 15, -22, 18, -39, 3, -3, 0, 12, 3, -5, 11, -6, -23, 13, 18, -32, -7, -5, -13, -12, -43, 3, -6, -19, -16, -44, 11, -41, -45, -10, 10, -19, 20, -23, 20, -34, -4, -25, 11, -3, -16, -4, 8, -5, -17, 7, 16, -15, 4, -18, 16, -25, 4, 7, 11, -34, 6, -10, -25, -3, -4, 6, 0, -33, -27, -36, 35, 0, 8, 0, -3, 16, 14, 5, 6, 6, -29, 22, -17, 
  -16, -36, -31, 2, -19, -22, 6, -15, 20, 4, 12, -1, -12, 31, -54, -21, 3, 30, 13, 12, -30, 20, 2, 26, 26, 16, 9, 1, 2, -23, 11, 19, 11, -4, -15, -1, -37, -15, -10, -39, 5, -35, 31, -42, -37, -38, -13, -11, -3, 15, -24, 15, -26, 8, -11, 26, 14, 16, 25, -4, 2, -20, 18, 15, -7, 4, 5, 8, -15, -29, -9, -30, -19, -23, 25, 3, -48, -54, -21, -18, -22, 22, -6, 14, -36, 4, -19, 29, 13, 12, 1, -17, -13, -28, 7, 16, 11, 7, -3, 27, -13, -7, -13, -21, -31, -34, 34, 5, -42, -21, -40, -8, -29, 18, 24, 9, -29, 3, -17, 19, 7, 17, 14, -27, -14, -4, -8, 17, 4, 7, 9, 15, -18, -12, -9, -11, -28, -39, 23, 11, -34, -6, -42, -15, -36, 19, 14, 11, -37, 3, -27, 22, -3, 21, 17, -23, 11, -8, 6, 16, 11, 7, -11, 17, -23, -17, -13, -32, -17, -33, 26, -5, -23, 2, -33, -7, -13, 16, 22, 17, -33, 3, -39, 22, 2, 14, 18, -31, 0, -30, -13, 19, 9, 11, -8, 19, -6, -47, -9, -26, -30, -49, 20, -11, -42, 14, -31, -27, -9, 22, 16, 23, -44, -4, -33, 16, 7, 13, 21, -39, 6, 11, -23, 22, 11, 10, -14, 13, -13, -46, -13, -36, -15, -33, 24, -17, -40, 6, -15, -15, -8, 18, 20, 8, -34, -5, -9, 15, 7, 15, 19, -14, 1, 0, -10, 18, 6, 7, -14, 18, -13, -61, -37, -37, -15, -20, 23, 1, -32, 14, -15, -11, -22, 19, 19, 17, -55, -9, -21, 15, 0, 18, 20, -24, 6, -13, -6, 13, 5, 11, -20, 19, -10, -51, 4, -10, 1, -26, 26, 9, -21, -2, -7, -5, -20, 21, 15, 17, -31, -10, -5, -6, 2, 10, 19, -4, 12, -13, 0, 7, 18, 6, -16, 22, -55, -23, 7, 5, -9, -33, 17, -6, -35, 12, -26, -2, 1, 40, 19, 9, -14, 6, 8, 8, -10, -2, 20, -12, 13, -18, -2, 1, 14, 10, -15, 18, -21, 5, -43, 10, -3, -25, 14, -31, -34, 10, -32, -9, 10, 24, 12, 13, -1, -11, 9, 9, -5, 8, 20, -19, 12, -11, -6, 0, 1, -4, 7, -7, -65, 5, -14, 1, -37, -1, 50, 10, 16, 3, 14, -3, -27, 12, -15, 2, -5, -2, -4, -1, -8, 14, 35, 10, -3, -22, -22, -2, 
  -66, 58, -16, 6, 2, -44, 13, -3, 11, -5, -3, -33, -29, -8, 34, -23, 9, -1, -12, -12, 22, 25, -12, -71, -28, -6, -7, -1, 11, 4, 3, -45, 50, 27, 11, 20, -12, -15, 5, -28, -4, 11, 7, -12, -20, -8, 40, -13, 5, 6, 0, 1, 11, 31, 17, -12, -24, -5, 7, -23, -8, 9, 5, -19, 37, 20, 1, -4, -8, -21, -12, -9, 6, 9, 16, -23, 0, -10, 27, -19, -9, -3, 26, -1, -3, 25, -9, -34, -16, -10, -3, -28, -13, 3, 0, -27, 37, 21, -1, -17, -15, -10, 3, 8, -21, 10, 15, -18, -14, -15, 29, -17, -18, -2, 17, -7, 2, 17, -25, -17, -18, -1, 8, -12, -14, 14, 10, -12, 39, 21, 3, -19, -4, 1, -9, 2, -15, 12, 12, -25, -36, -15, 30, -3, -36, -6, 25, -11, -1, 21, -17, -26, -15, -13, 8, 2, -11, 19, 5, -18, 38, 15, -13, -14, -15, -8, -6, 2, -3, 12, 16, -22, -20, -7, 34, -19, -27, -8, 24, -3, 2, 22, 3, -17, -16, -27, 2, -9, -9, 10, 7, -3, 33, 17, 1, -20, -11, -3, -9, 1, -17, 11, 10, -27, -23, -8, 26, -15, -19, -2, 18, -12, -3, 16, 10, -18, -6, -9, -7, -5, -3, 22, 8, -9, 32, 17, -3, -16, -15, 0, -7, 2, -12, 16, 19, -20, -20, -7, 24, -36, -25, 7, 27, -8, 3, 14, 25, -11, -14, -9, 3, 4, -5, -3, 13, -11, 35, 11, -3, -22, -14, -5, -9, 3, -9, 9, 15, -17, -24, -16, 23, -27, -18, -17, 23, -9, -2, 10, 19, -28, -24, -16, 0, 2, -1, 18, 11, 0, 22, 14, -4, -25, -17, 2, -6, -3, -10, 4, 11, -20, -14, -19, 23, -21, -16, 1, 22, -11, -4, 2, 16, -14, -7, -2, -3, -2, -7, 20, 12, -8, 30, 15, 6, -35, -11, -1, -8, -2, -20, 9, 7, -4, -34, -5, 33, -23, -17, -10, 12, -4, 1, 2, 15, -2, -2, -9, -14, 9, -5, 21, 16, -2, 33, 30, -7, -19, -20, 9, -7, 19, -25, -33, 23, -12, -10, -3, 0, -26, -17, 4, 14, -4, -4, -21, 6, -45, -3, -9, -6, 2, 8, 8, 16, -3, -6, 10, 4, -43, -11, 3, 8, -4, -48, -5, 29, 5, 2, -17, 35, -12, -18, -1, 19, -14, -32, 9, 5, 5, -47, 5, 6, 12, -3, 7, 4, -6, 
  -71, -34, 21, 5, 21, 34, 9, 32, 52, -37, -17, -8, 6, -61, -14, 11, 2, -10, 27, 16, -33, -57, 22, 20, -23, 12, -1, 1, -8, -13, -2, 27, -47, -48, -21, -15, 20, 23, 25, 22, -68, -34, -15, -28, 9, -42, 12, -3, -1, -6, 4, 12, -42, -42, 39, -60, 2, 16, -2, -15, 0, -7, 24, 4, -16, -43, -23, -12, 5, 26, 24, 17, 6, -33, -1, 0, 3, -28, 13, 18, 6, 11, -16, 2, -26, -28, 35, -20, 5, 17, 6, -6, -3, -9, 28, -8, -25, -13, -18, 1, 4, 22, 16, 8, 14, -24, -22, -17, 7, -23, 12, 10, -14, -1, -31, 1, -19, -35, 37, -9, 9, 2, -14, 8, -6, -18, 20, -14, -21, -35, -29, -2, 2, 32, 25, 10, 13, -19, -15, -10, 7, -21, 10, 19, -10, 13, -44, 1, -3, -21, 31, -20, 9, 9, -3, 15, -6, -36, 24, -13, -31, -32, -10, -2, 3, 25, 33, 15, 16, -28, -6, -22, 5, -36, 8, 24, 4, 15, -37, 1, -9, -31, 34, -5, 10, 15, -13, 7, -5, -28, 19, -10, -31, -21, -21, -32, 4, 25, 20, 20, 9, -43, -8, -6, 11, -37, 5, 25, 4, 2, -27, -11, -6, -22, 23, -4, 8, 19, -13, 12, -11, -3, 17, -11, -14, -30, -10, -29, 4, 28, 24, 17, 6, -19, -10, -21, 6, -30, 6, 20, -9, 10, -52, -1, -15, -28, 23, -11, 13, 15, -18, 3, -10, -23, 11, -15, -16, -19, -18, -18, -2, 29, 20, 24, 8, 0, -23, -10, 9, -39, 6, 11, -2, 6, -45, 15, 11, -31, 7, -7, 10, 17, -22, 1, -1, -19, 20, -14, -5, -33, -6, -18, -3, 23, 29, 13, 8, -11, -21, 11, 6, -75, 9, 18, -11, -3, -24, 4, -13, -22, -1, -8, 15, 9, -30, 5, 1, -20, -17, -8, -59, -39, 0, -20, 6, 32, 23, 18, 11, -4, -9, -46, 7, -1, 0, 14, -27, 7, -3, 3, -19, -8, 27, -11, 12, 5, -9, 12, 1, -12, -28, -11, -8, 0, 5, 1, 16, -4, -11, 12, 12, 3, -9, 22, 19, -4, 19, 11, -38, -3, -11, 15, -18, -17, 12, 0, 6, 12, -19, 19, -3, -17, -3, -3, 27, -42, 4, 6, -19, -11, -2, 7, 30, -17, 7, -30, -29, -15, -47, 4, -35, -4, -36, 15, 5, 8, 18, 17, 15, 6, -3, 6, -10, -12, 6, -5, 
  7, 23, -16, 1, 29, -14, -29, 18, -17, -5, -2, -55, -9, -21, -9, -12, 3, 3, 12, 18, -21, -11, 0, 28, 21, -5, 29, 10, -11, 0, 15, 32, 11, 2, -24, 26, 9, -27, -8, 17, 14, -33, 3, -78, -14, -18, -9, 11, 0, 16, -7, 24, -29, -15, -8, -6, 11, -23, 16, 1, -12, -3, 0, 22, -2, 9, -45, 6, 9, -20, -7, 15, 8, -27, -19, -32, -13, -7, -20, 19, 17, 21, -23, 18, -30, -14, 1, -3, 15, -27, 8, 25, -13, -12, -10, 25, 11, -2, -17, 0, -5, -10, -16, 12, 7, -29, -18, -10, -10, -18, -13, 31, 9, 13, -9, 8, -12, -25, 1, -20, 12, -17, 0, 14, -11, 4, 1, 23, 4, -5, -23, -18, -12, 2, -30, 10, 2, -24, -26, -47, -7, -27, -14, 22, -1, 19, -10, 13, -35, -26, 1, -17, 10, -14, 19, 13, -16, -11, -6, 25, 1, -10, -28, -7, -2, -26, -15, 19, 2, -18, -14, -2, -4, -37, -11, 18, 5, 15, 0, 14, -55, -25, 2, -18, 12, -19, 19, 12, -11, -15, -15, 28, -4, -10, -36, -14, -2, -24, -11, 14, 0, -28, -21, -7, -11, -34, -10, 11, -4, 13, -16, 15, -42, -16, 2, -19, 4, -18, 7, 13, -18, -13, -17, 26, 7, -7, -32, -10, -12, -7, -29, 6, 6, -15, -29, 3, -8, -15, -8, 8, -4, 14, -38, 15, -55, -18, -19, -12, 10, -18, 18, 7, -6, -7, -10, 23, 7, -2, -28, -3, -3, 7, -20, 8, 1, 1, -37, -28, -2, -27, -18, 15, 0, 9, -9, 14, -32, -21, -4, -24, 7, -12, 6, 5, -10, -4, -23, 27, -13, -9, -21, -16, -5, -4, -45, 12, 1, -33, -18, -77, -17, -31, -17, 15, 0, 14, -28, 10, -51, -7, 11, -39, 14, -14, 14, 11, 4, -9, -12, 22, -8, 9, -19, -22, 2, -9, -21, -1, 1, -15, -23, -43, -30, -28, -2, 20, 6, 9, -1, 13, -40, -17, -10, -52, 10, -31, 2, 11, -2, -1, -6, 12, 10, 17, -11, 10, -27, 3, -13, 10, 0, -6, -39, -12, -17, -7, -14, -1, -6, 1, -4, 11, -10, -5, -7, -27, 12, -38, 6, 11, -7, 2, -12, 18, 2, 28, -37, 17, -5, -6, -7, 6, 9, -1, -1, -80, -20, -6, -4, 13, 3, -6, -24, 22, -44, 11, 10, -6, 9, -4, 5, 13, 9, -2, -20, -11, 
  6, 29, -9, 6, 11, -10, -40, -21, -6, -12, -5, -38, 0, 36, -22, 7, 2, -17, -9, -14, -87, 29, -26, 46, -19, -17, -65, 25, 0, 14, -8, -27, -34, 18, 35, -4, -24, 5, -22, -1, -62, 5, 1, 25, 16, 11, -58, 11, 3, -22, 21, -32, -19, 27, -33, -12, -36, -21, 13, 6, -3, 12, 16, -23, -22, 9, 27, 17, -15, -6, 10, 2, -44, 6, 13, 27, 19, 11, -22, 16, -13, -16, 19, 4, -13, 14, -16, -33, -32, -12, 29, 12, 7, 8, 18, -23, -14, 4, 24, 18, -43, 0, 19, 3, 20, 5, 11, 19, 16, 8, -30, 1, -5, -43, 18, 5, -6, 23, -19, -30, -28, -12, -1, 0, -2, 10, 17, -18, -7, 5, 20, -5, -46, -2, 17, -1, 13, 3, -4, 19, 17, 8, -10, 7, 4, -50, 12, 15, -5, 17, -13, 3, -25, -26, 5, -12, -1, -2, 5, -45, -15, 4, 15, 8, -41, -1, 20, 3, 12, 4, -3, 20, 20, 3, -7, -10, 9, -34, 14, 8, 2, 17, -7, 2, -10, -12, 9, -9, 15, 14, 11, -55, -1, 2, 18, 8, -57, 3, 28, 3, 6, 1, -7, 18, 17, 9, 6, 6, 12, -13, 11, -9, -2, 27, -22, -8, -17, -12, -4, 11, 4, -6, 8, -28, -18, 4, 22, 4, -41, -7, 23, 6, 6, 7, -6, 28, 13, 10, -8, 16, 14, -26, 10, -7, -6, 21, -30, 1, -17, -12, -3, -7, 4, -8, 13, -6, -15, 2, 20, -3, -42, -9, 25, 2, 15, 8, 2, 22, 21, 10, -8, 21, 5, -20, 16, -9, 3, 22, -21, -9, 2, 2, 1, 4, 3, 14, 14, -36, -19, -1, 14, 19, -30, -1, 28, 13, 4, 2, 0, 23, 16, 25, 4, 8, 4, -8, 18, -27, 7, 24, -31, 10, -12, -2, -9, -5, 6, 2, 14, 18, -6, 4, 4, 11, -26, -14, 23, 10, 6, 17, -1, 26, 20, 12, -13, 22, 20, -17, 11, -24, 6, 18, -17, -3, -5, -3, 3, -22, -5, 9, 12, -16, -7, 11, 15, -3, -55, 8, 27, -5, 5, 17, 1, 18, 28, 18, -7, 11, 12, 1, 24, -32, 6, 13, -20, 11, 3, 5, -12, -10, -11, 9, 3, -22, 25, -26, 4, 5, -26, 1, -3, -35, 17, 14, -1, 35, 27, 27, 3, 13, 12, 20, 39, -41, -4, 4, 3, 5, -30, 9, -41, -44, -20, 0, -2, -4, 
  6, -7, -2, -7, -36, 7, 20, -21, -20, 13, -8, 12, 5, 35, -6, 14, 2, 8, -3, -21, 25, -14, -38, -20, -58, 1, -14, -1, 4, 14, -23, -21, -12, -28, 30, -8, 0, 6, 0, -11, -2, 20, -5, 29, 12, 21, 1, 5, 0, -7, 20, -9, 34, -6, -1, -29, -21, 19, -33, -1, 4, 13, -29, -29, -20, -27, 32, -13, 9, 10, -11, -22, -16, 18, -22, 7, 14, 20, -5, -4, -12, -19, 8, 0, 21, -4, 13, -37, -35, 23, -24, 22, 14, 6, 3, -42, -51, -33, 21, -4, 8, 18, -15, -9, -4, 18, -27, 8, -1, 11, 2, 13, -1, -15, 2, 2, 25, -11, 18, -8, -34, 13, -16, 16, 5, 14, -10, -38, -27, -34, 22, -24, 19, 7, -10, -13, -38, 24, -33, 7, 12, 15, 5, -10, -1, -21, 3, -1, 25, 0, 29, -17, -35, 10, -17, 13, -5, 19, -1, -29, -49, -32, 27, -16, 22, 11, -3, -12, -47, 24, -24, 12, 0, 17, -2, -13, -13, -7, -2, -12, 29, -5, 33, -43, -40, 5, -33, 20, 6, 16, 7, -37, -28, -42, 28, -9, 30, -2, 2, -13, -31, 27, -21, 13, 9, 15, -12, -5, 1, -25, 0, -18, 29, -15, 36, -27, -38, 2, -51, 15, 3, 19, 8, -30, -29, -21, 29, -19, 25, -4, -15, -6, -56, 21, -23, 8, 3, 14, -3, -25, -1, -26, -13, -12, 31, -10, 45, -18, -41, 10, -25, 11, -1, 9, 3, -14, -61, -21, 24, -42, 20, -1, -13, -15, -58, 19, -34, 8, 10, 16, -3, -7, -10, -23, -8, -12, 22, -10, 35, -6, -62, 3, -25, 19, 6, 6, 17, -1, -18, -20, 33, -28, 28, -26, -36, -17, -17, 16, -27, 9, -5, 9, -10, -15, 5, -7, -9, -8, 29, -24, 35, -14, -51, 5, -28, -1, -6, 18, 9, -27, -40, -27, 16, -27, 28, -25, -37, -17, -45, 16, -9, 14, 11, 10, -24, -8, -6, -20, -1, -11, 32, -23, 20, -1, -42, 24, -22, 5, -7, 3, 12, 3, -79, -53, 35, -30, 32, -11, -24, -15, -15, 26, -27, 0, 0, 15, 1, -1, -4, -19, -26, -19, 26, -9, 24, -18, -29, 29, -33, 5, -2, 1, 13, -16, -32, -23, 35, -13, 24, -12, -17, 7, -66, 5, 30, 10, 31, -6, -43, 3, -37, 0, -31, -18, 9, 9, -7, -3, -60, -3, -1, 14, 2, 4, 22, 7, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 15,416 } };
const TfArray<1, float> quant5_scale = { 1, { 0.014671296812593937, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[16*1*3*13] = { 
  /* [0][0][][] */ -75,-62,56,-1,3,8,2,4,9,-11,14,-8,1, -48,22,-127,23,-3,-8,-19,-9,10,3,5,4,-4, -67,-62,28,-10,-3,15,-3,-21,-1,7,2,-20,9, 
  /* [1][0][][] */ 127,-36,-2,18,-38,33,38,9,-48,7,16,-8,14, 101,1,-28,17,33,-21,21,8,2,-9,10,22,11, 104,-124,5,19,68,-13,5,-3,12,3,-8,17,-11, 
  /* [2][0][][] */ 127,-29,22,-73,-24,-23,11,89,7,-23,-4,-40,5, 54,49,-35,-16,-57,30,49,23,-20,-8,-2,-12,5, 107,-2,30,-17,-32,45,27,13,-8,-19,8,-10,7, 
  /* [3][0][][] */ -127,-61,26,-34,6,-10,-1,-10,1,-29,5,-15,8, -90,-86,19,24,14,-12,-5,19,13,18,-5,20,-22, -74,-16,-112,-16,18,37,-11,-1,-26,-20,1,-2,23, 
  /* [4][0][][] */ 85,-48,66,33,12,-3,-15,-3,42,-10,8,3,-23, 98,-46,82,-17,28,7,-13,-41,2,1,-7,-20,-9, -25,-127,73,42,-5,31,-45,17,-4,-1,-6,15,7, 
  /* [5][0][][] */ 43,-47,42,-6,-82,3,-11,-13,16,3,-3,8,7, -15,-17,96,21,-127,-2,-28,0,13,5,8,8,-15, -50,-9,35,32,-98,12,1,10,-7,9,0,7,12, 
  /* [6][0][][] */ -127,-85,-68,-7,54,0,-26,3,-1,-2,-4,37,-12, -20,-19,-57,-6,70,29,-7,12,11,-5,-19,5,1, 23,22,-14,-80,60,58,-30,-3,-13,-10,-22,6,8, 
  /* [7][0][][] */ 59,56,21,64,46,-81,6,127,-108,-66,83,4,-36, 36,39,-18,-26,35,-53,-59,58,53,-120,-26,69,-30, -13,26,-16,-103,16,53,-72,13,70,-30,-66,6,44, 
  /* [8][0][][] */ 22,121,-46,-57,111,19,-124,18,110,-9,-94,26,27, 69,52,-95,36,90,-115,-54,116,-22,-101,6,73,-20, 36,-45,9,110,-26,-127,54,58,-83,8,45,8,-19, 
  /* [9][0][][] */ -41,-53,42,-46,2,2,-8,3,-25,-17,17,9,11, -32,127,20,-67,-19,40,-11,-35,-17,19,21,27,-36, 5,-64,-8,-35,-9,20,-12,-13,36,20,-16,-12,-12, 
  /* [10][0][][] */ -60,127,10,61,10,43,-31,25,15,-17,12,-12,-7, -50,38,101,41,30,1,-20,-2,0,-5,-7,-14,9, 37,-68,16,20,-21,-2,10,29,-26,12,-8,-6,1, 
  /* [11][0][][] */ -30,127,-44,-94,53,13,-46,-18,24,46,1,5,-3, 14,90,50,-84,23,14,-41,-55,14,11,-20,-6,-9, -29,122,46,-95,20,-25,-75,-10,18,20,31,7,-18, 
  /* [12][0][][] */ -15,107,-127,32,11,11,13,10,-28,2,-14,12,6, -62,-15,-47,-31,35,43,30,-32,20,-6,-21,16,-8, -2,-83,-65,47,-4,45,24,-12,-5,-21,-14,22,-10, 
  /* [13][0][][] */ -18,-68,-18,41,-7,-28,-41,-60,0,1,-2,45,29, 77,62,23,59,-25,-64,-86,-83,38,59,17,-3,-29, -41,127,-18,-26,-41,-109,-29,13,53,73,-5,-22,-14, 
  /* [14][0][][] */ -118,-17,63,29,-7,-12,-46,-11,-4,-29,-4,18,-7, -41,56,70,14,21,-7,-58,4,-8,-27,12,-6,12, -127,89,78,36,40,35,-39,-6,-35,17,-7,28,3, 
  /* [15][0][][] */ -6,13,13,12,6,-5,5,-14,-2,-4,-6,-5,7, -85,-35,-27,-14,14,15,21,22,-19,7,1,-8,-12, -25,-127,10,-2,20,-30,12,-20,22,-7,4,-8,13, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 16,1,3,13 } };
const TfArray<16, float> quant6_scale = { 16, { 0.0087206689640879631, 0.0045168707147240639, 0.0040568509139120579, 0.0065451757982373238, 0.0047746500931680202, 0.005143588874489069, 0.0054453033953905106, 0.0034208574797958136, 0.0032117096707224846, 0.0062978588975965977, 0.0056144790723919868, 0.00365973892621696, 0.0058822650462388992, 0.003920460119843483, 0.0046064751222729683, 0.006816670298576355, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[32*1*3*16] = { 
  /* [0][0][][] */ -79,22,-1,-50,0,-17,23,1,-2,-19,-66,-4,39,-22,-127,-21, -78,-4,1,-92,-1,-14,3,-1,18,4,-76,-1,4,-32,-25,-12, -98,-3,19,-90,12,53,-38,-15,-15,15,9,-2,-18,-11,22,-48, 
  /* [1][0][][] */ 2,8,15,25,-57,-79,-13,2,126,-23,18,3,2,15,-1,-1, 7,19,18,-13,-31,-9,-66,-6,-32,-127,-29,-83,36,2,-86,-13, -30,19,19,-49,-13,95,-123,-16,-88,-111,-11,-89,4,13,-13,-34, 
  /* [2][0][][] */ -40,-19,7,-127,8,27,-8,1,-24,16,0,11,40,32,-3,-23, -26,-6,6,-71,-7,14,-15,-8,-34,19,-8,-13,-4,-1,-12,2, -19,6,-3,-24,31,-11,-19,-48,-37,-3,9,-25,21,-63,-28,13, 
  /* [3][0][][] */ -53,-56,-49,-82,-29,-15,-5,15,3,-4,-3,24,1,-7,2,-49, -23,-77,-127,-32,-10,-12,-9,-22,-15,-12,1,-16,-13,-2,3,-20, -9,-103,-79,-23,10,-23,-27,-72,-23,-16,16,10,-12,-32,27,-7, 
  /* [4][0][][] */ -10,10,35,-21,-7,4,-31,2,-11,-15,-29,-40,-5,-3,-127,2, -18,-2,-11,-19,-9,-18,-10,13,-10,-39,-24,-49,1,-19,-118,1, -5,20,-19,-9,-6,-42,10,0,-11,-17,-6,-29,8,-43,-75,6, 
  /* [5][0][][] */ 13,-11,-29,10,-11,-13,-17,-74,-2,7,-15,-43,-12,2,-14,34, -11,-3,9,-28,4,23,-53,10,0,-1,-17,-32,-28,41,-27,-16, -127,13,8,-92,12,0,-12,3,-4,-31,-42,-23,22,-8,-104,-21, 
  /* [6][0][][] */ -1,13,-23,-2,49,-5,-1,-30,-19,-47,-27,-25,9,-25,-33,2, -4,-21,-21,-8,-27,3,-4,-8,-40,5,-28,-5,-24,0,-4,2, -59,-7,12,-47,-62,5,-16,14,-1,33,-26,-1,-18,16,1,-127, 
  /* [7][0][][] */ 6,-107,-42,3,41,-28,-2,-110,-99,-54,8,-127,-59,-69,34,14, -17,-71,8,-7,0,-25,-24,29,-5,-43,37,-109,-105,-30,11,-4, -88,88,28,-64,-28,0,-4,37,6,-43,-7,-23,33,-68,-96,-62, 
  /* [8][0][][] */ -88,-9,-3,-108,0,-17,10,63,-10,-17,-50,7,0,4,-26,-127, -29,-24,0,-69,0,-12,22,-35,-16,4,-55,5,-2,9,-9,-78, 4,-84,4,-13,-20,4,-11,-52,-30,16,-7,19,-15,-7,9,0, 
  /* [9][0][][] */ 6,-87,-102,7,-36,-57,14,-23,-6,-8,-2,-34,12,-21,4,6, 2,-79,-127,2,4,-26,-4,-38,-10,-2,8,20,0,-20,6,1, -12,-18,-82,-17,14,11,-13,17,18,9,22,12,-31,34,14,-19, 
  /* [10][0][][] */ -123,-2,-2,-127,-5,5,1,-13,4,12,-18,-1,9,-2,-22,-62, -39,0,1,-80,3,-4,-4,-18,-1,-8,-4,-3,-3,-2,-18,-30, 1,-2,-6,-15,2,15,-5,-17,18,-17,-10,-4,-4,6,42,-14, 
  /* [11][0][][] */ -67,-15,-16,-97,-7,-2,-35,1,11,-3,18,15,-53,-9,9,-49, -127,-6,-10,-109,36,0,-29,-5,6,4,15,-8,-34,-17,-4,-22, -77,43,-4,-97,-3,2,12,-4,-16,-26,1,-18,-26,-29,-33,3, 
  /* [12][0][][] */ -47,6,-7,-50,18,25,-93,-60,-23,-19,5,-66,-9,7,-9,4, -106,9,-4,-127,-4,-7,-45,-19,-16,-39,4,-35,-1,-3,-6,-10, -77,17,-7,-95,14,-18,37,64,-12,-28,-15,17,1,5,1,-19, 
  /* [13][0][][] */ 1,-26,-63,-7,12,-2,6,-3,10,-9,14,-1,-34,10,8,-9, -60,-10,2,-97,12,0,-15,-8,3,-12,18,-6,-94,-2,9,-93, -124,5,14,-127,-7,21,1,-4,0,-32,15,-13,-29,4,-1,-47, 
  /* [14][0][][] */ -1,-127,-49,-7,-33,-23,-16,-5,0,9,2,5,-54,22,11,3, -50,-17,4,-17,-36,-40,-17,11,15,-11,0,6,-1,27,8,-63, -75,10,13,-44,-26,-29,-1,2,2,-32,-9,-4,32,-42,-20,-35, 
  /* [15][0][][] */ -3,-76,2,-2,-76,3,-4,40,4,7,25,42,40,-16,-1,-4, 2,-127,-44,0,-77,10,5,18,-22,-4,9,-47,-1,-16,0,6, 1,-120,-103,2,-90,3,-1,-4,-15,-12,-40,-71,24,-7,-11,4, 
  /* [16][0][][] */ -45,-22,-7,-127,-26,-27,-36,26,8,11,-31,10,-74,31,-3,-80, -27,-33,-25,-26,-4,-12,-45,-11,11,-4,-18,-5,-43,0,-9,-11, 1,-66,-42,5,-18,16,-14,-67,2,38,-28,4,-12,18,-13,20, 
  /* [17][0][][] */ 8,-69,-55,4,-12,5,-3,-63,-127,16,-89,-30,2,-39,-24,13, -4,-31,-12,1,-31,2,0,-18,-21,19,-71,-25,-7,-23,-12,6, -36,10,35,-27,-13,-10,16,19,14,14,-21,65,10,-2,-7,-74, 
  /* [18][0][][] */ -77,25,6,-82,13,12,-43,-20,33,-41,-16,-27,42,-27,1,-57, -56,-11,-5,-75,6,40,-79,-4,-38,2,3,-8,-24,10,7,-78, -22,-28,-22,0,32,17,-85,-43,-127,23,17,-1,-127,31,32,-33, 
  /* [19][0][][] */ 1,-8,-107,-1,4,-1,-16,-63,-94,-6,-3,-67,7,-13,4,0, 0,-7,-116,-1,0,6,-55,-17,-31,-10,3,-110,-8,8,-1,-1, 2,-10,-99,2,4,19,-17,-39,-70,-24,-2,-127,1,0,-3,1, 
  /* [20][0][][] */ -15,-43,-11,-33,13,9,-18,5,-24,9,16,0,-74,-2,29,-47, -119,-3,-4,-33,-5,14,-11,0,-7,31,-18,-1,-8,3,1,-127, -56,1,4,-32,-16,14,14,1,15,-8,-37,-5,9,12,-12,-62, 
  /* [21][0][][] */ 4,-56,-120,9,-84,-16,20,-6,-40,27,-8,3,8,7,20,5, -13,-61,-62,-14,-127,-21,-4,-13,7,12,-13,7,-23,0,6,-27, -56,-29,-16,-45,-60,-24,5,-13,23,3,-16,6,6,12,-12,-61, 
  /* [22][0][][] */ 1,-24,-52,5,-9,-96,0,-22,-17,-6,-22,-48,16,-56,-16,13, -7,3,-30,-12,12,-126,-21,-30,-29,-10,-60,-69,-53,-83,-67,-4, -29,32,-20,-24,35,-59,-27,-45,-27,-49,-72,-31,-127,-46,-84,-9, 
  /* [23][0][][] */ 1,-8,8,1,-7,-22,2,-42,-24,2,-71,21,-13,-16,-36,-7, -9,-11,3,-4,-36,-5,6,-31,-37,9,-83,3,-12,-3,-22,-47, -127,-5,20,-41,-26,0,-6,-39,-48,11,-24,7,-12,-14,-5,-33, 
  /* [24][0][][] */ -14,30,8,5,-27,-9,9,26,5,-23,0,-24,-7,-24,-75,-10, -13,3,1,-15,-39,-49,2,24,10,-12,-101,3,-14,-17,-127,-24, -11,8,-7,-1,-18,-29,39,28,19,6,4,43,5,-2,-9,-12, 
  /* [25][0][][] */ -78,-11,28,-34,-26,55,5,-14,-18,70,-67,4,18,-43,-53,-92, -77,0,-23,-121,-40,-51,3,-19,-13,1,-13,1,27,-22,-16,-60, -65,-2,-52,-127,-4,-59,52,-21,36,-49,33,0,0,35,5,-72, 
  /* [26][0][][] */ -7,-8,-7,-8,4,5,-45,-6,55,-32,15,-4,-20,11,-1,-5, -3,-35,-59,-3,2,-4,-8,-25,-11,-38,6,-44,-10,-5,1,2, 1,-45,-127,-3,6,4,-8,-54,-9,-3,5,-121,-2,-15,-3,3, 
  /* [27][0][][] */ -50,6,72,-68,-57,7,-4,29,10,-15,-80,9,22,-61,-127,-49, -12,3,-45,-8,-41,20,-14,9,-1,11,42,-28,21,-61,-81,6, 1,-10,-71,8,25,-30,-15,-33,-33,-16,-29,-110,11,-127,-83,44, 
  /* [28][0][][] */ -4,34,-11,-8,12,-9,7,-127,-29,63,54,-36,25,-33,7,1, -8,11,-46,-10,5,-24,1,35,-36,2,-10,-76,-14,-2,8,-13, -7,-8,-53,-13,-46,-29,1,33,-40,19,83,-37,21,-28,-3,-9, 
  /* [29][0][][] */ -1,-12,-37,0,7,-41,13,-56,-127,1,-4,-97,-4,-50,-5,1, -2,-8,-46,0,2,-89,8,-45,-96,-7,-13,-113,-5,-82,-3,0, -1,-5,-39,2,-3,-72,7,-40,-48,-3,3,-34,2,-81,8,0, 
  /* [30][0][][] */ -24,21,2,-33,-1,-5,-89,-43,-8,-67,-7,-38,-11,0,-22,-16, -9,1,-10,-13,37,11,-127,-62,-28,-50,-31,-39,-10,-5,-32,-2, 4,-11,-48,6,22,5,-18,-16,-25,1,-8,-36,0,11,-1,12, 
  /* [31][0][][] */ 6,-14,-27,33,-9,-58,25,-19,-26,23,9,-51,-28,-67,10,2, -17,22,-8,-11,-21,-127,21,-1,2,20,-22,-1,-4,-96,-48,-31, -122,12,31,-81,-10,-16,-5,-6,10,4,-113,5,-12,-82,-103,-92, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant7_scale = { 32, { 0.011794251389801502, 0.0058721140958368778, 0.012091811746358871, 0.0073107657954096794, 0.014369823969900608, 0.013333826325833797, 0.013881128281354904, 0.0056681795977056026, 0.01349983923137188, 0.010975665412843227, 0.017789749428629875, 0.011299118399620056, 0.011252555996179581, 0.014472076669335365, 0.014984769746661186, 0.0085263419896364212, 0.0085989534854888916, 0.0082535780966281891, 0.0075155016966164112, 0.013627307489514351, 0.01440038438886404, 0.0092705963179469109, 0.0074290921911597252, 0.013921169564127922, 0.0090147107839584351, 0.0069959498941898346, 0.012542577460408211, 0.00638964818790555, 0.0054974164813756943, 0.014647019095718861, 0.010430769063532352, 0.0096593359485268593, } };
const TfArray<32, int> quant7_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data9[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 25, 16, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[4] = { 1, 25, 1, 32, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,50,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.047561004757881165, } };
const TfArray<1, int> quant12_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.042571797966957092, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant14_scale = { 1, { 0.042571797966957092, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant15_scale = { 1, { 0.042571797966957092, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant16_scale = { 1, { 0.042571797966957092, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,32 } };
const TfArray<1, float> quant17_scale = { 1, { 0.034104466438293457, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,32 } };
const TfArray<1, float> quant18_scale = { 1, { 0.034104466438293457, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,32 } };
const TfArray<1, float> quant19_scale = { 1, { 0.034104466438293457, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,416 } };
const TfArray<1, float> quant20_scale = { 1, { 0.034104466438293457, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,15 } };
const TfArray<1, float> quant21_scale = { 1, { 0.2195943295955658, } };
const TfArray<1, int> quant21_zero = { 1, { 44 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,15 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 60, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 6240, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension13, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension21, 15, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 15, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
